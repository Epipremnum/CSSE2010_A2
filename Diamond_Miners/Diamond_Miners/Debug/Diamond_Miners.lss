
Diamond_Miners.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  000011ba  0000124e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022a  008001ae  008001ae  000012fc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ca  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010de  00000000  00000000  00003a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014de  00000000  00000000  00004b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000708  00000000  00000000  00005fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bde  00000000  00000000  000066e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001556  00000000  00000000  000072c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000881c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_5>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__vector_16>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 82 04 	jmp	0x904	; 0x904 <__vector_20>
      54:	0c 94 40 04 	jmp	0x880	; 0x880 <__vector_21>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2268>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2248>:
      a4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
      b4:	6f 6a 65 63 74 20 62 79 20 3c 79 6f 75 72 20 6e     oject by <your n
      c4:	61 6d 65 20 68 65 72 65 3e 00                       ame here>.

000000ce <__c.2246>:
      ce:	44 69 61 6d 6f 6e 64 20 4d 69 6e 65 72 73 00        Diamond Miners.

000000dd <__c.2040>:
      dd:	1b 5b 32 4a 00                                      .[2J.

000000e2 <__c.2025>:
      e2:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d8 e0       	ldi	r29, 0x08	; 8
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
      f8:	11 e0       	ldi	r17, 0x01	; 1
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	ea eb       	ldi	r30, 0xBA	; 186
     100:	f1 e1       	ldi	r31, 0x11	; 17
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x10>
     104:	05 90       	lpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 3a       	cpi	r26, 0xAE	; 174
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0xc>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	ae ea       	ldi	r26, 0xAE	; 174
     112:	b1 e0       	ldi	r27, 0x01	; 1
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 3d       	cpi	r26, 0xD8	; 216
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <main>
     122:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     12a:	e8 e6       	ldi	r30, 0x68	; 104
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	82 60       	ori	r24, 0x02	; 2
     132:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     134:	8b b3       	in	r24, 0x1b	; 27
     136:	82 60       	ori	r24, 0x02	; 2
     138:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     13a:	ec e6       	ldi	r30, 0x6C	; 108
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	80 81       	ld	r24, Z
     140:	8f 60       	ori	r24, 0x0F	; 15
     142:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     144:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <__data_end>
     148:	08 95       	ret

0000014a <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     14a:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <__data_end>
     14e:	18 16       	cp	r1, r24
     150:	14 f5       	brge	.+68     	; 0x196 <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     152:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     156:	6f b7       	in	r22, 0x3f	; 63
		cli();
     158:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	09 c0       	rjmp	.+18     	; 0x170 <button_pushed+0x26>
			button_queue[i-1] = button_queue[i];
     15e:	f9 01       	movw	r30, r18
     160:	e1 55       	subi	r30, 0x51	; 81
     162:	fe 4f       	sbci	r31, 0xFE	; 254
     164:	40 81       	ld	r20, Z
     166:	f9 01       	movw	r30, r18
     168:	e2 55       	subi	r30, 0x52	; 82
     16a:	fe 4f       	sbci	r31, 0xFE	; 254
     16c:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     16e:	9f 5f       	subi	r25, 0xFF	; 255
     170:	29 2f       	mov	r18, r25
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	40 91 ae 01 	lds	r20, 0x01AE	; 0x8001ae <__data_end>
     178:	04 2e       	mov	r0, r20
     17a:	00 0c       	add	r0, r0
     17c:	55 0b       	sbc	r21, r21
     17e:	24 17       	cp	r18, r20
     180:	35 07       	cpc	r19, r21
     182:	6c f3       	brlt	.-38     	; 0x15e <button_pushed+0x14>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     184:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <__data_end>
     188:	91 50       	subi	r25, 0x01	; 1
     18a:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <__data_end>
		
		if(interrupts_were_enabled) {
     18e:	66 23       	and	r22, r22
     190:	1c f4       	brge	.+6      	; 0x198 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     192:	78 94       	sei
     194:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     196:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     198:	08 95       	ret

0000019a <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     19a:	1f 92       	push	r1
     19c:	0f 92       	push	r0
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	0f 92       	push	r0
     1a2:	11 24       	eor	r1, r1
     1a4:	2f 93       	push	r18
     1a6:	3f 93       	push	r19
     1a8:	4f 93       	push	r20
     1aa:	8f 93       	push	r24
     1ac:	9f 93       	push	r25
     1ae:	ef 93       	push	r30
     1b0:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     1b2:	43 b1       	in	r20, 0x03	; 3
     1b4:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	26 c0       	rjmp	.+76     	; 0x206 <__vector_5+0x6c>
		if(queue_length < BUTTON_QUEUE_SIZE && 
     1ba:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <__data_end>
     1be:	94 30       	cpi	r25, 0x04	; 4
     1c0:	0c f5       	brge	.+66     	; 0x204 <__vector_5+0x6a>
     1c2:	24 2f       	mov	r18, r20
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	08 2e       	mov	r0, r24
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <__vector_5+0x34>
     1ca:	35 95       	asr	r19
     1cc:	27 95       	ror	r18
     1ce:	0a 94       	dec	r0
     1d0:	e2 f7       	brpl	.-8      	; 0x1ca <__vector_5+0x30>
     1d2:	20 ff       	sbrs	r18, 0
     1d4:	17 c0       	rjmp	.+46     	; 0x204 <__vector_5+0x6a>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     1d6:	20 91 b3 01 	lds	r18, 0x01B3	; 0x8001b3 <last_button_state>
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	08 2e       	mov	r0, r24
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <__vector_5+0x4a>
     1e0:	35 95       	asr	r19
     1e2:	27 95       	ror	r18
     1e4:	0a 94       	dec	r0
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <__vector_5+0x46>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     1e8:	20 fd       	sbrc	r18, 0
     1ea:	0c c0       	rjmp	.+24     	; 0x204 <__vector_5+0x6a>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     1ec:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <__data_end>
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	9e 0f       	add	r25, r30
     1f4:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <__data_end>
     1f8:	0e 2e       	mov	r0, r30
     1fa:	00 0c       	add	r0, r0
     1fc:	ff 0b       	sbc	r31, r31
     1fe:	e1 55       	subi	r30, 0x51	; 81
     200:	fe 4f       	sbci	r31, 0xFE	; 254
     202:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     204:	8f 5f       	subi	r24, 0xFF	; 255
     206:	84 30       	cpi	r24, 0x04	; 4
     208:	c0 f2       	brcs	.-80     	; 0x1ba <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     20a:	40 93 b3 01 	sts	0x01B3, r20	; 0x8001b3 <last_button_state>
     20e:	ff 91       	pop	r31
     210:	ef 91       	pop	r30
     212:	9f 91       	pop	r25
     214:	8f 91       	pop	r24
     216:	4f 91       	pop	r20
     218:	3f 91       	pop	r19
     21a:	2f 91       	pop	r18
     21c:	0f 90       	pop	r0
     21e:	0f be       	out	0x3f, r0	; 63
     220:	0f 90       	pop	r0
     222:	1f 90       	pop	r1
     224:	18 95       	reti

00000226 <initialise_display>:
static const uint8_t miners_display[MATRIX_NUM_COLUMNS] = 
		{125, 69, 69, 57, 0, 16, 56, 124, 56, 16, 0, 125, 33, 17, 33, 125};

void initialise_display(void) {
	// clear the LED matrix
	ledmatrix_clear();
     226:	0e 94 d5 02 	call	0x5aa	; 0x5aa <ledmatrix_clear>
     22a:	08 95       	ret

0000022c <start_display>:
}

void start_display(void) {
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	28 97       	sbiw	r28, 0x08	; 8
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     242:	0e 94 d5 02 	call	0x5aa	; 0x5aa <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     246:	10 e0       	ldi	r17, 0x00	; 0
     248:	29 c0       	rjmp	.+82     	; 0x29c <start_display+0x70>
		col_data = miners_display[col];
     24a:	e1 2f       	mov	r30, r17
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	e2 5f       	subi	r30, 0xF2	; 242
     250:	fe 4f       	sbci	r31, 0xFE	; 254
     252:	90 81       	ld	r25, Z
		// using the LSB as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x01) {
     254:	90 ff       	sbrs	r25, 0
     256:	02 c0       	rjmp	.+4      	; 0x25c <start_display+0x30>
			colour = COLOUR_RED;
     258:	2f e0       	ldi	r18, 0x0F	; 15
     25a:	01 c0       	rjmp	.+2      	; 0x25e <start_display+0x32>
		} else {
			colour = COLOUR_GREEN;
     25c:	20 ef       	ldi	r18, 0xF0	; 240
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     25e:	87 e0       	ldi	r24, 0x07	; 7
     260:	13 c0       	rjmp	.+38     	; 0x288 <start_display+0x5c>
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data & 0x80) {
     262:	99 23       	and	r25, r25
     264:	44 f4       	brge	.+16     	; 0x276 <start_display+0x4a>
				column_colour_data[i] = colour;
     266:	e1 e0       	ldi	r30, 0x01	; 1
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	ec 0f       	add	r30, r28
     26c:	fd 1f       	adc	r31, r29
     26e:	e8 0f       	add	r30, r24
     270:	f1 1d       	adc	r31, r1
     272:	20 83       	st	Z, r18
     274:	07 c0       	rjmp	.+14     	; 0x284 <start_display+0x58>
				} else {
				column_colour_data[i] = 0;
     276:	e1 e0       	ldi	r30, 0x01	; 1
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	ec 0f       	add	r30, r28
     27c:	fd 1f       	adc	r31, r29
     27e:	e8 0f       	add	r30, r24
     280:	f1 1d       	adc	r31, r1
     282:	10 82       	st	Z, r1
			}
			col_data <<= 1;
     284:	99 0f       	add	r25, r25
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     286:	81 50       	subi	r24, 0x01	; 1
     288:	81 11       	cpse	r24, r1
     28a:	eb cf       	rjmp	.-42     	; 0x262 <start_display+0x36>
				} else {
				column_colour_data[i] = 0;
			}
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
     28c:	19 82       	std	Y+1, r1	; 0x01
		ledmatrix_update_column(col, column_colour_data);
     28e:	be 01       	movw	r22, r28
     290:	6f 5f       	subi	r22, 0xFF	; 255
     292:	7f 4f       	sbci	r23, 0xFF	; 255
     294:	81 2f       	mov	r24, r17
     296:	0e 94 b8 02 	call	0x570	; 0x570 <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     29a:	1f 5f       	subi	r17, 0xFF	; 255
     29c:	10 31       	cpi	r17, 0x10	; 16
     29e:	a8 f2       	brcs	.-86     	; 0x24a <start_display+0x1e>
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
}
     2a0:	28 96       	adiw	r28, 0x08	; 8
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	de bf       	out	0x3e, r29	; 62
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	1f 91       	pop	r17
     2b2:	08 95       	ret

000002b4 <update_square_colour>:

void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	// first check that this is a square within the game field
	// if outside the game field, don't update anything
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
     2b4:	80 31       	cpi	r24, 0x10	; 16
     2b6:	d8 f4       	brcc	.+54     	; 0x2ee <update_square_colour+0x3a>
     2b8:	68 30       	cpi	r22, 0x08	; 8
     2ba:	c8 f4       	brcc	.+50     	; 0x2ee <update_square_colour+0x3a>
		return;
	}
	
	// determine which colour corresponds to this object
	PixelColour colour;
	if (object == PLAYER) {
     2bc:	41 30       	cpi	r20, 0x01	; 1
     2be:	61 f0       	breq	.+24     	; 0x2d8 <update_square_colour+0x24>
		colour = MATRIX_COLOUR_PLAYER;
	} else if (object == FACING) {
     2c0:	42 30       	cpi	r20, 0x02	; 2
     2c2:	61 f0       	breq	.+24     	; 0x2dc <update_square_colour+0x28>
		colour = MATRIX_COLOUR_FACING;
	} else if (object == BREAKABLE || object == UNBREAKABLE) {
     2c4:	9d ef       	ldi	r25, 0xFD	; 253
     2c6:	94 0f       	add	r25, r20
     2c8:	92 30       	cpi	r25, 0x02	; 2
     2ca:	50 f0       	brcs	.+20     	; 0x2e0 <update_square_colour+0x2c>
		colour = MATRIX_COLOUR_WALL;
	} else if (object == DIAMOND) {
     2cc:	45 30       	cpi	r20, 0x05	; 5
     2ce:	51 f0       	breq	.+20     	; 0x2e4 <update_square_colour+0x30>
		colour = MATRIX_COLOUR_DIAMOND;
	} else if (object == UNDISCOVERED) {
     2d0:	46 30       	cpi	r20, 0x06	; 6
     2d2:	51 f4       	brne	.+20     	; 0x2e8 <update_square_colour+0x34>
		colour = MATRIX_COLOUR_UNDISCOVERED;
     2d4:	45 e3       	ldi	r20, 0x35	; 53
     2d6:	09 c0       	rjmp	.+18     	; 0x2ea <update_square_colour+0x36>
	}
	
	// determine which colour corresponds to this object
	PixelColour colour;
	if (object == PLAYER) {
		colour = MATRIX_COLOUR_PLAYER;
     2d8:	4f e0       	ldi	r20, 0x0F	; 15
     2da:	07 c0       	rjmp	.+14     	; 0x2ea <update_square_colour+0x36>
	} else if (object == FACING) {
		colour = MATRIX_COLOUR_FACING;
     2dc:	41 e0       	ldi	r20, 0x01	; 1
     2de:	05 c0       	rjmp	.+10     	; 0x2ea <update_square_colour+0x36>
	} else if (object == BREAKABLE || object == UNBREAKABLE) {
		colour = MATRIX_COLOUR_WALL;
     2e0:	4f ed       	ldi	r20, 0xDF	; 223
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <update_square_colour+0x36>
	} else if (object == DIAMOND) {
		colour = MATRIX_COLOUR_DIAMOND;
     2e4:	40 ef       	ldi	r20, 0xF0	; 240
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <update_square_colour+0x36>
	} else if (object == UNDISCOVERED) {
		colour = MATRIX_COLOUR_UNDISCOVERED;
	} else {
		// anything unexpected (or empty) will be black
		colour = MATRIX_COLOUR_EMPTY;
     2e8:	40 e0       	ldi	r20, 0x00	; 0
	}

	// update the pixel at the given location with this colour
	ledmatrix_update_pixel(x, y, colour);
     2ea:	0e 94 99 02 	call	0x532	; 0x532 <ledmatrix_update_pixel>
     2ee:	08 95       	ret

000002f0 <initialise_game_state>:
 * initialise the game state, sets up the playing field, visibility
 * the player and the player direction indicator
 */
void initialise_game_state(void) {
	// initialise the player position and the facing position
	player_x = PLAYER_START_X;
     2f0:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <player_x>
	player_y = PLAYER_START_Y;
     2f4:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <player_y>
	facing_x = FACING_START_X;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <facing_x>
	facing_y = FACING_START_Y;
     2fe:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <facing_y>
	facing_visible = 1;
     302:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <facing_visible>
	
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	2c c0       	rjmp	.+88     	; 0x364 <initialise_game_state+0x74>
		for (int y = 0; y < HEIGHT; y++) {
			// initialise this square based on the starting layout
			// the indices here are to ensure the starting layout
			// could be easily visualised when declared
			playing_field[x][y] = starting_layout[HEIGHT - 1 - y][x];
     30c:	e7 e0       	ldi	r30, 0x07	; 7
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	e2 1b       	sub	r30, r18
     312:	f3 0b       	sbc	r31, r19
     314:	e2 95       	swap	r30
     316:	f2 95       	swap	r31
     318:	f0 7f       	andi	r31, 0xF0	; 240
     31a:	fe 27       	eor	r31, r30
     31c:	e0 7f       	andi	r30, 0xF0	; 240
     31e:	fe 27       	eor	r31, r30
     320:	e2 5d       	subi	r30, 0xD2	; 210
     322:	fe 4f       	sbci	r31, 0xFE	; 254
     324:	e4 0f       	add	r30, r20
     326:	f5 1f       	adc	r31, r21
     328:	60 81       	ld	r22, Z
     32a:	ca 01       	movw	r24, r20
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	fc 01       	movw	r30, r24
     33a:	e6 54       	subi	r30, 0x46	; 70
     33c:	fe 4f       	sbci	r31, 0xFE	; 254
     33e:	e2 0f       	add	r30, r18
     340:	f3 1f       	adc	r31, r19
     342:	60 83       	st	Z, r22
			// set all squares to start not visible, this will be
			// updated once the display is initialised as well
			visible[x][y] = 0;
     344:	86 5c       	subi	r24, 0xC6	; 198
     346:	9d 4f       	sbci	r25, 0xFD	; 253
     348:	fc 01       	movw	r30, r24
     34a:	e2 0f       	add	r30, r18
     34c:	f3 1f       	adc	r31, r19
     34e:	10 82       	st	Z, r1
	facing_y = FACING_START_Y;
	facing_visible = 1;
	
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
		for (int y = 0; y < HEIGHT; y++) {
     350:	2f 5f       	subi	r18, 0xFF	; 255
     352:	3f 4f       	sbci	r19, 0xFF	; 255
     354:	02 c0       	rjmp	.+4      	; 0x35a <initialise_game_state+0x6a>
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	28 30       	cpi	r18, 0x08	; 8
     35c:	31 05       	cpc	r19, r1
     35e:	b4 f2       	brlt	.-84     	; 0x30c <initialise_game_state+0x1c>
	facing_x = FACING_START_X;
	facing_y = FACING_START_Y;
	facing_visible = 1;
	
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
     360:	4f 5f       	subi	r20, 0xFF	; 255
     362:	5f 4f       	sbci	r21, 0xFF	; 255
     364:	40 31       	cpi	r20, 0x10	; 16
     366:	51 05       	cpc	r21, r1
     368:	b4 f3       	brlt	.-20     	; 0x356 <initialise_game_state+0x66>
			// set all squares to start not visible, this will be
			// updated once the display is initialised as well
			visible[x][y] = 0;
		}
	}	
}
     36a:	08 95       	ret

0000036c <in_bounds>:
	initialise_game_display();
}

uint8_t in_bounds(uint8_t x, uint8_t y) {
	// a square is in bounds if 0 <= x < WIDTH && 0 <= y < HEIGHT
	return x >= 0 && x < WIDTH && y >= 0 && y < HEIGHT;
     36c:	80 31       	cpi	r24, 0x10	; 16
     36e:	20 f4       	brcc	.+8      	; 0x378 <in_bounds+0xc>
     370:	68 30       	cpi	r22, 0x08	; 8
     372:	20 f0       	brcs	.+8      	; 0x37c <in_bounds+0x10>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	08 95       	ret
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	08 95       	ret
     37c:	81 e0       	ldi	r24, 0x01	; 1
}
     37e:	08 95       	ret

00000380 <get_object_at>:

uint8_t get_object_at(uint8_t x, uint8_t y) {
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	c8 2f       	mov	r28, r24
     386:	d6 2f       	mov	r29, r22
	// check the bounds, anything outside the bounds
	// will be considered an unbreakable wall
	if (!in_bounds(x,y)) {
     388:	0e 94 b6 01 	call	0x36c	; 0x36c <in_bounds>
     38c:	88 23       	and	r24, r24
     38e:	71 f0       	breq	.+28     	; 0x3ac <get_object_at+0x2c>
		return UNBREAKABLE;
	} else {
		//if in the bounds, just index into the array
		return playing_field[x][y];
     390:	ec 2f       	mov	r30, r28
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	ee 0f       	add	r30, r30
     39e:	ff 1f       	adc	r31, r31
     3a0:	e6 54       	subi	r30, 0x46	; 70
     3a2:	fe 4f       	sbci	r31, 0xFE	; 254
     3a4:	ed 0f       	add	r30, r29
     3a6:	f1 1d       	adc	r31, r1
     3a8:	80 81       	ld	r24, Z
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <get_object_at+0x2e>

uint8_t get_object_at(uint8_t x, uint8_t y) {
	// check the bounds, anything outside the bounds
	// will be considered an unbreakable wall
	if (!in_bounds(x,y)) {
		return UNBREAKABLE;
     3ac:	84 e0       	ldi	r24, 0x04	; 4
	} else {
		//if in the bounds, just index into the array
		return playing_field[x][y];
	}
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <flash_facing>:

void flash_facing(void) {
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
	// only flash the facing cursor if it is in bounds
	if (in_bounds(facing_x, facing_y)) {
     3b8:	d0 91 bc 02 	lds	r29, 0x02BC	; 0x8002bc <facing_y>
     3bc:	c0 91 bd 02 	lds	r28, 0x02BD	; 0x8002bd <facing_x>
     3c0:	6d 2f       	mov	r22, r29
     3c2:	8c 2f       	mov	r24, r28
     3c4:	0e 94 b6 01 	call	0x36c	; 0x36c <in_bounds>
     3c8:	88 23       	and	r24, r24
     3ca:	c9 f0       	breq	.+50     	; 0x3fe <flash_facing+0x4a>
		if (facing_visible) {
     3cc:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <facing_visible>
     3d0:	88 23       	and	r24, r24
     3d2:	51 f0       	breq	.+20     	; 0x3e8 <flash_facing+0x34>
			// we need to flash the facing cursor off, it should be replaced by
			// the colour of the piece which is at that location
			uint8_t piece_at_cursor = get_object_at(facing_x, facing_y);
     3d4:	6d 2f       	mov	r22, r29
     3d6:	8c 2f       	mov	r24, r28
     3d8:	0e 94 c0 01 	call	0x380	; 0x380 <get_object_at>
			update_square_colour(facing_x, facing_y, piece_at_cursor);
     3dc:	48 2f       	mov	r20, r24
     3de:	6d 2f       	mov	r22, r29
     3e0:	8c 2f       	mov	r24, r28
     3e2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <update_square_colour>
     3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <flash_facing+0x3e>
		
		} else {
			// we need to flash the facing cursor on
			update_square_colour(facing_x, facing_y, FACING);
     3e8:	42 e0       	ldi	r20, 0x02	; 2
     3ea:	6d 2f       	mov	r22, r29
     3ec:	8c 2f       	mov	r24, r28
     3ee:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <update_square_colour>
		}
		facing_visible = 1 - facing_visible; //alternate between 0 and 1
     3f2:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <facing_visible>
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	89 1b       	sub	r24, r25
     3fa:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <facing_visible>
	}
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <move_player>:

// check the header file game.h for a description of what this function should do
// it contains a few extra hints
void move_player(uint8_t dx, uint8_t dy) {
     404:	08 95       	ret

00000406 <is_game_over>:
}

uint8_t is_game_over(void) {
	// initially the game never ends
	return 0;
}
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	08 95       	ret

0000040a <discoverable_dfs>:
 * given an (x,y) coordinate, perform a depth first search to make any
 * squares reachable from here visible. If a wall is broken at a position
 * (x,y), this function should be called with coordinates (x,y)
 * YOU SHOULD NOT NEED TO MODIFY THIS FUNCTION
 */
void discoverable_dfs(uint8_t x, uint8_t y) {
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	f8 2e       	mov	r15, r24
     418:	e6 2e       	mov	r14, r22
	uint8_t x_adj, y_adj, object_here;
	// set the current square to be visible and update display
	visible[x][y] = 1;
     41a:	e8 2f       	mov	r30, r24
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	ee 0f       	add	r30, r30
     420:	ff 1f       	adc	r31, r31
     422:	ee 0f       	add	r30, r30
     424:	ff 1f       	adc	r31, r31
     426:	ee 0f       	add	r30, r30
     428:	ff 1f       	adc	r31, r31
     42a:	e6 5c       	subi	r30, 0xC6	; 198
     42c:	fd 4f       	sbci	r31, 0xFD	; 253
     42e:	e6 0f       	add	r30, r22
     430:	f1 1d       	adc	r31, r1
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	80 83       	st	Z, r24
	object_here = get_object_at(x, y);
     436:	8f 2d       	mov	r24, r15
     438:	0e 94 c0 01 	call	0x380	; 0x380 <get_object_at>
     43c:	c8 2f       	mov	r28, r24
	update_square_colour(x, y, object_here);
     43e:	48 2f       	mov	r20, r24
     440:	6e 2d       	mov	r22, r14
     442:	8f 2d       	mov	r24, r15
     444:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <update_square_colour>
	// we can continue exploring from this square if it is empty
	if (object_here == EMPTY_SQUARE || object_here == DIAMOND) {
     448:	cc 23       	and	r28, r28
     44a:	41 f1       	breq	.+80     	; 0x49c <discoverable_dfs+0x92>
     44c:	c5 30       	cpi	r28, 0x05	; 5
     44e:	71 f5       	brne	.+92     	; 0x4ac <discoverable_dfs+0xa2>
     450:	28 c0       	rjmp	.+80     	; 0x4a2 <discoverable_dfs+0x98>
		// consider all 4 adjacent square
		for (int i = 0; i < NUM_DIRECTIONS; i++) {
			x_adj = x + directions[i][0];
     452:	f8 01       	movw	r30, r16
     454:	ee 0f       	add	r30, r30
     456:	ff 1f       	adc	r31, r31
     458:	e2 5e       	subi	r30, 0xE2	; 226
     45a:	fe 4f       	sbci	r31, 0xFE	; 254
     45c:	c0 81       	ld	r28, Z
     45e:	cf 0d       	add	r28, r15
			y_adj = y + directions[i][1];
     460:	d1 81       	ldd	r29, Z+1	; 0x01
     462:	de 0d       	add	r29, r14
			// if this square is not visible yet, it should be explored
			if (in_bounds(x_adj, y_adj) && !visible[x_adj][y_adj]) {
     464:	6d 2f       	mov	r22, r29
     466:	8c 2f       	mov	r24, r28
     468:	0e 94 b6 01 	call	0x36c	; 0x36c <in_bounds>
     46c:	88 23       	and	r24, r24
     46e:	99 f0       	breq	.+38     	; 0x496 <discoverable_dfs+0x8c>
     470:	ec 2f       	mov	r30, r28
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	ee 0f       	add	r30, r30
     476:	ff 1f       	adc	r31, r31
     478:	ee 0f       	add	r30, r30
     47a:	ff 1f       	adc	r31, r31
     47c:	ee 0f       	add	r30, r30
     47e:	ff 1f       	adc	r31, r31
     480:	e6 5c       	subi	r30, 0xC6	; 198
     482:	fd 4f       	sbci	r31, 0xFD	; 253
     484:	ed 0f       	add	r30, r29
     486:	f1 1d       	adc	r31, r1
     488:	80 81       	ld	r24, Z
     48a:	81 11       	cpse	r24, r1
     48c:	04 c0       	rjmp	.+8      	; 0x496 <discoverable_dfs+0x8c>
				// this recursive call implements a depth first search
				// the visible array ensures termination
				discoverable_dfs(x_adj, y_adj);
     48e:	6d 2f       	mov	r22, r29
     490:	8c 2f       	mov	r24, r28
     492:	0e 94 05 02 	call	0x40a	; 0x40a <discoverable_dfs>
	object_here = get_object_at(x, y);
	update_square_colour(x, y, object_here);
	// we can continue exploring from this square if it is empty
	if (object_here == EMPTY_SQUARE || object_here == DIAMOND) {
		// consider all 4 adjacent square
		for (int i = 0; i < NUM_DIRECTIONS; i++) {
     496:	0f 5f       	subi	r16, 0xFF	; 255
     498:	1f 4f       	sbci	r17, 0xFF	; 255
     49a:	05 c0       	rjmp	.+10     	; 0x4a6 <discoverable_dfs+0x9c>
     49c:	00 e0       	ldi	r16, 0x00	; 0
     49e:	10 e0       	ldi	r17, 0x00	; 0
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <discoverable_dfs+0x9c>
     4a2:	00 e0       	ldi	r16, 0x00	; 0
     4a4:	10 e0       	ldi	r17, 0x00	; 0
     4a6:	08 30       	cpi	r16, 0x08	; 8
     4a8:	11 05       	cpc	r17, r1
     4aa:	9c f2       	brlt	.-90     	; 0x452 <discoverable_dfs+0x48>
				// the visible array ensures termination
				discoverable_dfs(x_adj, y_adj);
			}
		}
	}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	08 95       	ret

000004ba <initialise_game_display>:
/*
 * initialise the display of the game, shows the player and the player
 * direction indicator. 
 * executes a visibility search from the player's starting location
 */
void initialise_game_display(void) {
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
	// initialise the display
	initialise_display();
     4c2:	0e 94 13 01 	call	0x226	; 0x226 <initialise_display>
	// make the entire playing field undiscovered to start
	for (int x = 0; x < WIDTH; x++) {
     4c6:	00 e0       	ldi	r16, 0x00	; 0
     4c8:	10 e0       	ldi	r17, 0x00	; 0
     4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <initialise_game_display+0x2e>
		for (int y = 0; y < HEIGHT; y++) {
			update_square_colour(x, y, UNDISCOVERED);
     4cc:	46 e0       	ldi	r20, 0x06	; 6
     4ce:	6c 2f       	mov	r22, r28
     4d0:	80 2f       	mov	r24, r16
     4d2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <update_square_colour>
void initialise_game_display(void) {
	// initialise the display
	initialise_display();
	// make the entire playing field undiscovered to start
	for (int x = 0; x < WIDTH; x++) {
		for (int y = 0; y < HEIGHT; y++) {
     4d6:	21 96       	adiw	r28, 0x01	; 1
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <initialise_game_display+0x24>
     4da:	c0 e0       	ldi	r28, 0x00	; 0
     4dc:	d0 e0       	ldi	r29, 0x00	; 0
     4de:	c8 30       	cpi	r28, 0x08	; 8
     4e0:	d1 05       	cpc	r29, r1
     4e2:	a4 f3       	brlt	.-24     	; 0x4cc <initialise_game_display+0x12>
 */
void initialise_game_display(void) {
	// initialise the display
	initialise_display();
	// make the entire playing field undiscovered to start
	for (int x = 0; x < WIDTH; x++) {
     4e4:	0f 5f       	subi	r16, 0xFF	; 255
     4e6:	1f 4f       	sbci	r17, 0xFF	; 255
     4e8:	00 31       	cpi	r16, 0x10	; 16
     4ea:	11 05       	cpc	r17, r1
     4ec:	b4 f3       	brlt	.-20     	; 0x4da <initialise_game_display+0x20>
		for (int y = 0; y < HEIGHT; y++) {
			update_square_colour(x, y, UNDISCOVERED);
		}
	}
	// now explore visibility from the starting location
	discoverable_dfs(player_x, player_y);
     4ee:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <player_y>
     4f2:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <player_x>
     4f6:	0e 94 05 02 	call	0x40a	; 0x40a <discoverable_dfs>
	// make the player and facing square visible
	update_square_colour(player_x, player_y, PLAYER);
     4fa:	41 e0       	ldi	r20, 0x01	; 1
     4fc:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <player_y>
     500:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <player_x>
     504:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <update_square_colour>
	update_square_colour(facing_x, facing_y, FACING);
     508:	42 e0       	ldi	r20, 0x02	; 2
     50a:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <facing_y>
     50e:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <facing_x>
     512:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <update_square_colour>
}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	08 95       	ret

00000520 <initialise_game>:

void initialise_game(void) {
	// to initialise the game, we need to initialise the state (variables)
	// and the display
	initialise_game_state();
     520:	0e 94 78 01 	call	0x2f0	; 0x2f0 <initialise_game_state>
	initialise_game_display();
     524:	0e 94 5d 02 	call	0x4ba	; 0x4ba <initialise_game_display>
     528:	08 95       	ret

0000052a <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     52a:	80 e8       	ldi	r24, 0x80	; 128
     52c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <spi_setup_master>
     530:	08 95       	ret

00000532 <ledmatrix_update_pixel>:
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	80 31       	cpi	r24, 0x10	; 16
     53a:	b0 f4       	brcc	.+44     	; 0x568 <ledmatrix_update_pixel+0x36>
     53c:	68 30       	cpi	r22, 0x08	; 8
     53e:	a0 f4       	brcc	.+40     	; 0x568 <ledmatrix_update_pixel+0x36>
     540:	14 2f       	mov	r17, r20
     542:	c6 2f       	mov	r28, r22
     544:	d8 2f       	mov	r29, r24
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	0e 94 01 05 	call	0xa02	; 0xa02 <spi_send_byte>
     54c:	6c 2f       	mov	r22, r28
     54e:	67 70       	andi	r22, 0x07	; 7
     550:	80 e1       	ldi	r24, 0x10	; 16
     552:	68 9f       	mul	r22, r24
     554:	90 01       	movw	r18, r0
     556:	11 24       	eor	r1, r1
     558:	8d 2f       	mov	r24, r29
     55a:	8f 70       	andi	r24, 0x0F	; 15
     55c:	82 2b       	or	r24, r18
     55e:	0e 94 01 05 	call	0xa02	; 0xa02 <spi_send_byte>
     562:	81 2f       	mov	r24, r17
     564:	0e 94 01 05 	call	0xa02	; 0xa02 <spi_send_byte>
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	08 95       	ret

00000570 <ledmatrix_update_column>:
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	80 31       	cpi	r24, 0x10	; 16
     578:	a0 f4       	brcc	.+40     	; 0x5a2 <ledmatrix_update_column+0x32>
     57a:	8b 01       	movw	r16, r22
     57c:	c8 2f       	mov	r28, r24
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	0e 94 01 05 	call	0xa02	; 0xa02 <spi_send_byte>
     584:	8c 2f       	mov	r24, r28
     586:	8f 70       	andi	r24, 0x0F	; 15
     588:	0e 94 01 05 	call	0xa02	; 0xa02 <spi_send_byte>
     58c:	c0 e0       	ldi	r28, 0x00	; 0
     58e:	07 c0       	rjmp	.+14     	; 0x59e <ledmatrix_update_column+0x2e>
     590:	f8 01       	movw	r30, r16
     592:	ec 0f       	add	r30, r28
     594:	f1 1d       	adc	r31, r1
     596:	80 81       	ld	r24, Z
     598:	0e 94 01 05 	call	0xa02	; 0xa02 <spi_send_byte>
     59c:	cf 5f       	subi	r28, 0xFF	; 255
     59e:	c8 30       	cpi	r28, 0x08	; 8
     5a0:	b8 f3       	brcs	.-18     	; 0x590 <ledmatrix_update_column+0x20>
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	08 95       	ret

000005aa <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     5aa:	8f e0       	ldi	r24, 0x0F	; 15
     5ac:	0e 94 01 05 	call	0xa02	; 0xa02 <spi_send_byte>
     5b0:	08 95       	ret

000005b2 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     5b2:	0e 94 95 02 	call	0x52a	; 0x52a <ledmatrix_setup>
	init_button_interrupts();
     5b6:	0e 94 95 00 	call	0x12a	; 0x12a <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	7b e4       	ldi	r23, 0x4B	; 75
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 ed 03 	call	0x7da	; 0x7da <init_serial_stdio>
	
	init_timer0();
     5c8:	0e 94 21 05 	call	0xa42	; 0xa42 <init_timer0>
	
	// Turn on global interrupts
	sei();
     5cc:	78 94       	sei
     5ce:	08 95       	ret

000005d0 <start_screen>:
}

void start_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
     5d0:	0e 94 18 05 	call	0xa30	; 0xa30 <clear_terminal>
	move_terminal_cursor(10,10);
     5d4:	6a e0       	ldi	r22, 0x0A	; 10
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	8a e0       	ldi	r24, 0x0A	; 10
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 07 05 	call	0xa0e	; 0xa0e <move_terminal_cursor>
	printf_P(PSTR("Diamond Miners"));
     5e0:	8e ec       	ldi	r24, 0xCE	; 206
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	9f 93       	push	r25
     5e6:	8f 93       	push	r24
     5e8:	0e 94 ed 05 	call	0xbda	; 0xbda <printf_P>
	move_terminal_cursor(10,12);
     5ec:	6c e0       	ldi	r22, 0x0C	; 12
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	8a e0       	ldi	r24, 0x0A	; 10
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 07 05 	call	0xa0e	; 0xa0e <move_terminal_cursor>
	printf_P(PSTR("CSSE2010/7201 project by <your name here>"));
     5f8:	84 ea       	ldi	r24, 0xA4	; 164
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	0e 94 ed 05 	call	0xbda	; 0xbda <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	start_display();
     604:	0e 94 16 01 	call	0x22c	; 0x22c <start_display>
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
     610:	0e 94 34 04 	call	0x868	; 0x868 <serial_input_available>
     614:	88 23       	and	r24, r24
     616:	39 f0       	breq	.+14     	; 0x626 <start_screen+0x56>
			serial_input = fgetc(stdin);
     618:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <__iob>
     61c:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <__iob+0x1>
     620:	0e 94 af 05 	call	0xb5e	; 0xb5e <fgetc>
     624:	01 c0       	rjmp	.+2      	; 0x628 <start_screen+0x58>
	while(1) {
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     626:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
     628:	83 37       	cpi	r24, 0x73	; 115
     62a:	31 f0       	breq	.+12     	; 0x638 <start_screen+0x68>
     62c:	83 35       	cpi	r24, 0x53	; 83
     62e:	21 f0       	breq	.+8      	; 0x638 <start_screen+0x68>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     630:	0e 94 a5 00 	call	0x14a	; 0x14a <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
     634:	8f 3f       	cpi	r24, 0xFF	; 255
     636:	61 f3       	breq	.-40     	; 0x610 <start_screen+0x40>
     638:	08 95       	ret

0000063a <new_game>:
	}
}

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     63a:	0e 94 18 05 	call	0xa30	; 0xa30 <clear_terminal>
	
	// Initialise the game and display
	initialise_game();
     63e:	0e 94 90 02 	call	0x520	; 0x520 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     642:	0e 94 a5 00 	call	0x14a	; 0x14a <button_pushed>
	clear_serial_input_buffer();
     646:	0e 94 3b 04 	call	0x876	; 0x876 <clear_serial_input_buffer>
     64a:	08 95       	ret

0000064c <play_game>:
}

void play_game(void) {
     64c:	8f 92       	push	r8
     64e:	9f 92       	push	r9
     650:	af 92       	push	r10
     652:	bf 92       	push	r11
     654:	cf 92       	push	r12
     656:	df 92       	push	r13
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
	
	uint32_t last_flash_time, current_time;
	uint8_t btn; //the button pushed
	
	last_flash_time = get_current_time();
     65c:	0e 94 39 05 	call	0xa72	; 0xa72 <get_current_time>
     660:	4b 01       	movw	r8, r22
     662:	5c 01       	movw	r10, r24
	
	// We play the game until it's over
	while(!is_game_over()) {
     664:	1b c0       	rjmp	.+54     	; 0x69c <play_game+0x50>
		
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		btn = button_pushed();
     666:	0e 94 a5 00 	call	0x14a	; 0x14a <button_pushed>
		
		if (btn == BUTTON0_PUSHED) {
     66a:	81 11       	cpse	r24, r1
     66c:	04 c0       	rjmp	.+8      	; 0x676 <play_game+0x2a>
			// If button 0 is pushed, move right, i.e increase x by 1 and leave
			// y the same
			move_player(1, 0);
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0e 94 02 02 	call	0x404	; 0x404 <move_player>
		}
	
		current_time = get_current_time();
     676:	0e 94 39 05 	call	0xa72	; 0xa72 <get_current_time>
     67a:	6b 01       	movw	r12, r22
     67c:	7c 01       	movw	r14, r24
		if(current_time >= last_flash_time + 500) {
     67e:	d5 01       	movw	r26, r10
     680:	c4 01       	movw	r24, r8
     682:	8c 50       	subi	r24, 0x0C	; 12
     684:	9e 4f       	sbci	r25, 0xFE	; 254
     686:	af 4f       	sbci	r26, 0xFF	; 255
     688:	bf 4f       	sbci	r27, 0xFF	; 255
     68a:	c8 16       	cp	r12, r24
     68c:	d9 06       	cpc	r13, r25
     68e:	ea 06       	cpc	r14, r26
     690:	fb 06       	cpc	r15, r27
     692:	20 f0       	brcs	.+8      	; 0x69c <play_game+0x50>
			// 500ms (0.5 second) has passed since the last time we
			// flashed the cursor, so flash the cursor
			flash_facing();
     694:	0e 94 da 01 	call	0x3b4	; 0x3b4 <flash_facing>
			
			// Update the most recent time the cursor was flashed
			last_flash_time = current_time;
     698:	46 01       	movw	r8, r12
     69a:	57 01       	movw	r10, r14
	uint8_t btn; //the button pushed
	
	last_flash_time = get_current_time();
	
	// We play the game until it's over
	while(!is_game_over()) {
     69c:	0e 94 03 02 	call	0x406	; 0x406 <is_game_over>
     6a0:	88 23       	and	r24, r24
     6a2:	09 f3       	breq	.-62     	; 0x666 <play_game+0x1a>
			// Update the most recent time the cursor was flashed
			last_flash_time = current_time;
		}
	}
	// We get here if the game is over.
}
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	df 90       	pop	r13
     6aa:	cf 90       	pop	r12
     6ac:	bf 90       	pop	r11
     6ae:	af 90       	pop	r10
     6b0:	9f 90       	pop	r9
     6b2:	8f 90       	pop	r8
     6b4:	08 95       	ret

000006b6 <handle_game_over>:

void handle_game_over() {
	move_terminal_cursor(10,14);
     6b6:	6e e0       	ldi	r22, 0x0E	; 14
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	8a e0       	ldi	r24, 0x0A	; 10
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 07 05 	call	0xa0e	; 0xa0e <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     6c2:	8a e9       	ldi	r24, 0x9A	; 154
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	9f 93       	push	r25
     6c8:	8f 93       	push	r24
     6ca:	0e 94 ed 05 	call	0xbda	; 0xbda <printf_P>
	move_terminal_cursor(10,15);
     6ce:	6f e0       	ldi	r22, 0x0F	; 15
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	8a e0       	ldi	r24, 0x0A	; 10
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 07 05 	call	0xa0e	; 0xa0e <move_terminal_cursor>
	printf_P(PSTR("Press a button to start again"));
     6da:	8c e7       	ldi	r24, 0x7C	; 124
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	9f 93       	push	r25
     6e0:	8f 93       	push	r24
     6e2:	0e 94 ed 05 	call	0xbda	; 0xbda <printf_P>
	
	while(button_pushed() == NO_BUTTON_PUSHED) {
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0e 94 a5 00 	call	0x14a	; 0x14a <button_pushed>
     6f2:	8f 3f       	cpi	r24, 0xFF	; 255
     6f4:	e1 f3       	breq	.-8      	; 0x6ee <handle_game_over+0x38>
		; // wait
	}
	
}
     6f6:	08 95       	ret

000006f8 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     6f8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <initialise_hardware>
	
	// Show the splash screen message. Returns when display is complete
	start_screen();
     6fc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <start_screen>
	
	// Loop forever,
	while(1) {
		new_game();
     700:	0e 94 1d 03 	call	0x63a	; 0x63a <new_game>
		play_game();
     704:	0e 94 26 03 	call	0x64c	; 0x64c <play_game>
		handle_game_over();
     708:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <handle_game_over>
     70c:	f9 cf       	rjmp	.-14     	; 0x700 <main+0x8>

0000070e <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     70e:	cf 93       	push	r28
     710:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     712:	8a 30       	cpi	r24, 0x0A	; 10
     714:	19 f4       	brne	.+6      	; 0x71c <uart_put_char+0xe>
		uart_put_char('\r', stream);
     716:	8d e0       	ldi	r24, 0x0D	; 13
     718:	0e 94 87 03 	call	0x70e	; 0x70e <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     71c:	9f b7       	in	r25, 0x3f	; 63
     71e:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     720:	02 c0       	rjmp	.+4      	; 0x726 <uart_put_char+0x18>
		if(!interrupts_enabled) {
     722:	99 23       	and	r25, r25
     724:	29 f1       	breq	.+74     	; 0x770 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     726:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <bytes_in_out_buffer>
     72a:	8f 3f       	cpi	r24, 0xFF	; 255
     72c:	d1 f3       	breq	.-12     	; 0x722 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     72e:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     730:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <out_insert_pos>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	8e 0f       	add	r24, r30
     738:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <out_insert_pos>
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	e0 54       	subi	r30, 0x40	; 64
     740:	fd 4f       	sbci	r31, 0xFD	; 253
     742:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     744:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <bytes_in_out_buffer>
     748:	8f 5f       	subi	r24, 0xFF	; 255
     74a:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     74e:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <out_insert_pos>
     752:	8f 3f       	cpi	r24, 0xFF	; 255
     754:	11 f4       	brne	.+4      	; 0x75a <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     756:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     75a:	e1 ec       	ldi	r30, 0xC1	; 193
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	80 81       	ld	r24, Z
     760:	80 62       	ori	r24, 0x20	; 32
     762:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     764:	99 23       	and	r25, r25
     766:	39 f0       	breq	.+14     	; 0x776 <uart_put_char+0x68>
		sei();
     768:	78 94       	sei
	}
	return 0;
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	05 c0       	rjmp	.+10     	; 0x77a <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	02 c0       	rjmp	.+4      	; 0x77a <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
}
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     77e:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <bytes_in_input_buffer>
     782:	88 23       	and	r24, r24
     784:	e1 f3       	breq	.-8      	; 0x77e <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     786:	2f b7       	in	r18, 0x3f	; 63
     788:	20 78       	andi	r18, 0x80	; 128
	cli();
     78a:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     78c:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <input_insert_pos>
     790:	30 91 d1 03 	lds	r19, 0x03D1	; 0x8003d1 <bytes_in_input_buffer>
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	83 1b       	sub	r24, r19
     798:	91 09       	sbc	r25, r1
     79a:	5a f4       	brpl	.+22     	; 0x7b2 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     79c:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <input_insert_pos>
     7a0:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <bytes_in_input_buffer>
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	e8 1b       	sub	r30, r24
     7a8:	f1 09       	sbc	r31, r1
     7aa:	e0 53       	subi	r30, 0x30	; 48
     7ac:	fc 4f       	sbci	r31, 0xFC	; 252
     7ae:	80 81       	ld	r24, Z
     7b0:	0a c0       	rjmp	.+20     	; 0x7c6 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     7b2:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <input_insert_pos>
     7b6:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <bytes_in_input_buffer>
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	e8 1b       	sub	r30, r24
     7be:	f1 09       	sbc	r31, r1
     7c0:	e0 54       	subi	r30, 0x40	; 64
     7c2:	fc 4f       	sbci	r31, 0xFC	; 252
     7c4:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     7c6:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <bytes_in_input_buffer>
     7ca:	91 50       	subi	r25, 0x01	; 1
     7cc:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <bytes_in_input_buffer>
	if(interrupts_enabled) {
     7d0:	22 23       	and	r18, r18
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <uart_get_char+0x58>
		sei();
     7d4:	78 94       	sei
	}	
	return c;
}
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	08 95       	ret

000007da <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     7da:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <out_insert_pos>
	bytes_in_out_buffer = 0;
     7de:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <bytes_in_out_buffer>
	input_insert_pos = 0;
     7e2:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <input_insert_pos>
	bytes_in_input_buffer = 0;
     7e6:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <bytes_in_input_buffer>
	input_overrun = 0;
     7ea:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     7ee:	40 93 b4 01 	sts	0x01B4, r20	; 0x8001b4 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     7f2:	dc 01       	movw	r26, r24
     7f4:	cb 01       	movw	r24, r22
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	aa 1f       	adc	r26, r26
     7fc:	bb 1f       	adc	r27, r27
     7fe:	88 0f       	add	r24, r24
     800:	99 1f       	adc	r25, r25
     802:	aa 1f       	adc	r26, r26
     804:	bb 1f       	adc	r27, r27
     806:	9c 01       	movw	r18, r24
     808:	ad 01       	movw	r20, r26
     80a:	22 0f       	add	r18, r18
     80c:	33 1f       	adc	r19, r19
     80e:	44 1f       	adc	r20, r20
     810:	55 1f       	adc	r21, r21
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	72 e1       	ldi	r23, 0x12	; 18
     816:	8a e7       	ldi	r24, 0x7A	; 122
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 6e 05 	call	0xadc	; 0xadc <__divmodsi4>
     81e:	ba 01       	movw	r22, r20
     820:	a9 01       	movw	r20, r18
     822:	4f 5f       	subi	r20, 0xFF	; 255
     824:	5f 4f       	sbci	r21, 0xFF	; 255
     826:	6f 4f       	sbci	r22, 0xFF	; 255
     828:	7f 4f       	sbci	r23, 0xFF	; 255
     82a:	db 01       	movw	r26, r22
     82c:	ca 01       	movw	r24, r20
     82e:	1a f4       	brpl	.+6      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	a1 1d       	adc	r26, r1
     834:	b1 1d       	adc	r27, r1
     836:	b5 95       	asr	r27
     838:	a7 95       	ror	r26
     83a:	97 95       	ror	r25
     83c:	87 95       	ror	r24
     83e:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     840:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     844:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     848:	e1 ec       	ldi	r30, 0xC1	; 193
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	88 e1       	ldi	r24, 0x18	; 24
     84e:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     850:	80 81       	ld	r24, Z
     852:	80 68       	ori	r24, 0x80	; 128
     854:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     856:	e2 ed       	ldi	r30, 0xD2	; 210
     858:	f3 e0       	ldi	r31, 0x03	; 3
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	93 83       	std	Z+3, r25	; 0x03
     860:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     862:	91 83       	std	Z+1, r25	; 0x01
     864:	80 83       	st	Z, r24
     866:	08 95       	ret

00000868 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     868:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <bytes_in_input_buffer>
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	91 11       	cpse	r25, r1
     870:	01 c0       	rjmp	.+2      	; 0x874 <serial_input_available+0xc>
     872:	80 e0       	ldi	r24, 0x00	; 0
}
     874:	08 95       	ret

00000876 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     876:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <input_insert_pos>
	bytes_in_input_buffer = 0;
     87a:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <bytes_in_input_buffer>
     87e:	08 95       	ret

00000880 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     880:	1f 92       	push	r1
     882:	0f 92       	push	r0
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	0f 92       	push	r0
     888:	11 24       	eor	r1, r1
     88a:	2f 93       	push	r18
     88c:	8f 93       	push	r24
     88e:	9f 93       	push	r25
     890:	ef 93       	push	r30
     892:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     894:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <bytes_in_out_buffer>
     898:	88 23       	and	r24, r24
     89a:	29 f1       	breq	.+74     	; 0x8e6 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     89c:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <out_insert_pos>
     8a0:	20 91 bf 02 	lds	r18, 0x02BF	; 0x8002bf <bytes_in_out_buffer>
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	82 1b       	sub	r24, r18
     8a8:	91 09       	sbc	r25, r1
     8aa:	5a f4       	brpl	.+22     	; 0x8c2 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     8ac:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <out_insert_pos>
     8b0:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <bytes_in_out_buffer>
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	e8 1b       	sub	r30, r24
     8b8:	f1 09       	sbc	r31, r1
     8ba:	e1 54       	subi	r30, 0x41	; 65
     8bc:	fc 4f       	sbci	r31, 0xFC	; 252
     8be:	90 81       	ld	r25, Z
     8c0:	0a c0       	rjmp	.+20     	; 0x8d6 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     8c2:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <out_insert_pos>
     8c6:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <bytes_in_out_buffer>
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	e8 1b       	sub	r30, r24
     8ce:	f1 09       	sbc	r31, r1
     8d0:	e0 54       	subi	r30, 0x40	; 64
     8d2:	fd 4f       	sbci	r31, 0xFD	; 253
     8d4:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     8d6:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <bytes_in_out_buffer>
     8da:	81 50       	subi	r24, 0x01	; 1
     8dc:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     8e0:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     8e6:	e1 ec       	ldi	r30, 0xC1	; 193
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	8f 7d       	andi	r24, 0xDF	; 223
     8ee:	80 83       	st	Z, r24
	}
}
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	9f 91       	pop	r25
     8f6:	8f 91       	pop	r24
     8f8:	2f 91       	pop	r18
     8fa:	0f 90       	pop	r0
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	0f 90       	pop	r0
     900:	1f 90       	pop	r1
     902:	18 95       	reti

00000904 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     904:	1f 92       	push	r1
     906:	0f 92       	push	r0
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	0f 92       	push	r0
     90c:	11 24       	eor	r1, r1
     90e:	2f 93       	push	r18
     910:	3f 93       	push	r19
     912:	4f 93       	push	r20
     914:	5f 93       	push	r21
     916:	6f 93       	push	r22
     918:	7f 93       	push	r23
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
     91e:	af 93       	push	r26
     920:	bf 93       	push	r27
     922:	cf 93       	push	r28
     924:	ef 93       	push	r30
     926:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     928:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     92c:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <do_echo>
     930:	88 23       	and	r24, r24
     932:	49 f0       	breq	.+18     	; 0x946 <__vector_20+0x42>
     934:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <bytes_in_out_buffer>
     938:	8f 3f       	cpi	r24, 0xFF	; 255
     93a:	29 f0       	breq	.+10     	; 0x946 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	8c 2f       	mov	r24, r28
     942:	0e 94 87 03 	call	0x70e	; 0x70e <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     946:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <bytes_in_input_buffer>
     94a:	80 31       	cpi	r24, 0x10	; 16
     94c:	20 f0       	brcs	.+8      	; 0x956 <__vector_20+0x52>
		input_overrun = 1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <input_overrun>
     954:	18 c0       	rjmp	.+48     	; 0x986 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     956:	cd 30       	cpi	r28, 0x0D	; 13
     958:	09 f4       	brne	.+2      	; 0x95c <__vector_20+0x58>
			c = '\n';
     95a:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     95c:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <input_insert_pos>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	8e 0f       	add	r24, r30
     964:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <input_insert_pos>
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	e0 54       	subi	r30, 0x40	; 64
     96c:	fc 4f       	sbci	r31, 0xFC	; 252
     96e:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     970:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <bytes_in_input_buffer>
     974:	8f 5f       	subi	r24, 0xFF	; 255
     976:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     97a:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <input_insert_pos>
     97e:	80 31       	cpi	r24, 0x10	; 16
     980:	11 f4       	brne	.+4      	; 0x986 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     982:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <input_insert_pos>
		}
	}
}
     986:	ff 91       	pop	r31
     988:	ef 91       	pop	r30
     98a:	cf 91       	pop	r28
     98c:	bf 91       	pop	r27
     98e:	af 91       	pop	r26
     990:	9f 91       	pop	r25
     992:	8f 91       	pop	r24
     994:	7f 91       	pop	r23
     996:	6f 91       	pop	r22
     998:	5f 91       	pop	r21
     99a:	4f 91       	pop	r20
     99c:	3f 91       	pop	r19
     99e:	2f 91       	pop	r18
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	0f 90       	pop	r0
     9a6:	1f 90       	pop	r1
     9a8:	18 95       	reti

000009aa <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
     9aa:	94 b1       	in	r25, 0x04	; 4
     9ac:	90 6b       	ori	r25, 0xB0	; 176
     9ae:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
     9b0:	95 b1       	in	r25, 0x05	; 5
     9b2:	90 61       	ori	r25, 0x10	; 16
     9b4:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
     9b6:	90 e5       	ldi	r25, 0x50	; 80
     9b8:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
     9ba:	88 30       	cpi	r24, 0x08	; 8
     9bc:	21 f0       	breq	.+8      	; 0x9c6 <spi_setup_master+0x1c>
     9be:	80 32       	cpi	r24, 0x20	; 32
     9c0:	11 f0       	breq	.+4      	; 0x9c6 <spi_setup_master+0x1c>
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	19 f4       	brne	.+6      	; 0x9cc <spi_setup_master+0x22>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	9d bd       	out	0x2d, r25	; 45
			break;
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
     9cc:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
     9ce:	80 32       	cpi	r24, 0x20	; 32
     9d0:	69 f0       	breq	.+26     	; 0x9ec <spi_setup_master+0x42>
     9d2:	28 f4       	brcc	.+10     	; 0x9de <spi_setup_master+0x34>
     9d4:	88 30       	cpi	r24, 0x08	; 8
     9d6:	71 f0       	breq	.+28     	; 0x9f4 <spi_setup_master+0x4a>
     9d8:	80 31       	cpi	r24, 0x10	; 16
     9da:	61 f0       	breq	.+24     	; 0x9f4 <spi_setup_master+0x4a>
     9dc:	0e c0       	rjmp	.+28     	; 0x9fa <spi_setup_master+0x50>
     9de:	80 34       	cpi	r24, 0x40	; 64
     9e0:	29 f0       	breq	.+10     	; 0x9ec <spi_setup_master+0x42>
     9e2:	80 38       	cpi	r24, 0x80	; 128
     9e4:	51 f4       	brne	.+20     	; 0x9fa <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1<<SPR00);
     9e6:	8c b5       	in	r24, 0x2c	; 44
     9e8:	81 60       	ori	r24, 0x01	; 1
     9ea:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
     9ec:	8c b5       	in	r24, 0x2c	; 44
     9ee:	82 60       	ori	r24, 0x02	; 2
     9f0:	8c bd       	out	0x2c, r24	; 44
			break;
     9f2:	03 c0       	rjmp	.+6      	; 0x9fa <spi_setup_master+0x50>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
     9f4:	8c b5       	in	r24, 0x2c	; 44
     9f6:	81 60       	ori	r24, 0x01	; 1
     9f8:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
     9fa:	85 b1       	in	r24, 0x05	; 5
     9fc:	8f 7e       	andi	r24, 0xEF	; 239
     9fe:	85 b9       	out	0x05, r24	; 5
     a00:	08 95       	ret

00000a02 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
     a02:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
     a04:	0d b4       	in	r0, 0x2d	; 45
     a06:	07 fe       	sbrs	r0, 7
     a08:	fd cf       	rjmp	.-6      	; 0xa04 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
     a0a:	8e b5       	in	r24, 0x2e	; 46
     a0c:	08 95       	ret

00000a0e <move_terminal_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
     a0e:	9f 93       	push	r25
     a10:	8f 93       	push	r24
     a12:	7f 93       	push	r23
     a14:	6f 93       	push	r22
     a16:	82 ee       	ldi	r24, 0xE2	; 226
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	9f 93       	push	r25
     a1c:	8f 93       	push	r24
     a1e:	0e 94 ed 05 	call	0xbda	; 0xbda <printf_P>
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	08 95       	ret

00000a30 <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
     a30:	8d ed       	ldi	r24, 0xDD	; 221
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	9f 93       	push	r25
     a36:	8f 93       	push	r24
     a38:	0e 94 ed 05 	call	0xbda	; 0xbda <printf_P>
}
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	08 95       	ret

00000a42 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
     a42:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <clockTicks>
     a46:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <clockTicks+0x1>
     a4a:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <clockTicks+0x2>
     a4e:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
     a52:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
     a54:	8c e7       	ldi	r24, 0x7C	; 124
     a56:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
     a60:	ee e6       	ldi	r30, 0x6E	; 110
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	82 60       	ori	r24, 0x02	; 2
     a68:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
     a6a:	85 b3       	in	r24, 0x15	; 21
     a6c:	82 70       	andi	r24, 0x02	; 2
     a6e:	85 bb       	out	0x15, r24	; 21
     a70:	08 95       	ret

00000a72 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
     a72:	8f b7       	in	r24, 0x3f	; 63
     a74:	28 2f       	mov	r18, r24
     a76:	20 78       	andi	r18, 0x80	; 128
	cli();
     a78:	f8 94       	cli
	returnValue = clockTicks;
     a7a:	60 91 b5 01 	lds	r22, 0x01B5	; 0x8001b5 <clockTicks>
     a7e:	70 91 b6 01 	lds	r23, 0x01B6	; 0x8001b6 <clockTicks+0x1>
     a82:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <clockTicks+0x2>
     a86:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <clockTicks+0x3>
	if(interruptsOn) {
     a8a:	22 23       	and	r18, r18
     a8c:	09 f0       	breq	.+2      	; 0xa90 <get_current_time+0x1e>
		sei();
     a8e:	78 94       	sei
	}
	return returnValue;
}
     a90:	08 95       	ret

00000a92 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
     a92:	1f 92       	push	r1
     a94:	0f 92       	push	r0
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	0f 92       	push	r0
     a9a:	11 24       	eor	r1, r1
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
     aa4:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <clockTicks>
     aa8:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <clockTicks+0x1>
     aac:	a0 91 b7 01 	lds	r26, 0x01B7	; 0x8001b7 <clockTicks+0x2>
     ab0:	b0 91 b8 01 	lds	r27, 0x01B8	; 0x8001b8 <clockTicks+0x3>
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	a1 1d       	adc	r26, r1
     ab8:	b1 1d       	adc	r27, r1
     aba:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <clockTicks>
     abe:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <clockTicks+0x1>
     ac2:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <clockTicks+0x2>
     ac6:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <clockTicks+0x3>
}
     aca:	bf 91       	pop	r27
     acc:	af 91       	pop	r26
     ace:	9f 91       	pop	r25
     ad0:	8f 91       	pop	r24
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	0f 90       	pop	r0
     ad8:	1f 90       	pop	r1
     ada:	18 95       	reti

00000adc <__divmodsi4>:
     adc:	05 2e       	mov	r0, r21
     ade:	97 fb       	bst	r25, 7
     ae0:	1e f4       	brtc	.+6      	; 0xae8 <__divmodsi4+0xc>
     ae2:	00 94       	com	r0
     ae4:	0e 94 85 05 	call	0xb0a	; 0xb0a <__negsi2>
     ae8:	57 fd       	sbrc	r21, 7
     aea:	07 d0       	rcall	.+14     	; 0xafa <__divmodsi4_neg2>
     aec:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__udivmodsi4>
     af0:	07 fc       	sbrc	r0, 7
     af2:	03 d0       	rcall	.+6      	; 0xafa <__divmodsi4_neg2>
     af4:	4e f4       	brtc	.+18     	; 0xb08 <__divmodsi4_exit>
     af6:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__negsi2>

00000afa <__divmodsi4_neg2>:
     afa:	50 95       	com	r21
     afc:	40 95       	com	r20
     afe:	30 95       	com	r19
     b00:	21 95       	neg	r18
     b02:	3f 4f       	sbci	r19, 0xFF	; 255
     b04:	4f 4f       	sbci	r20, 0xFF	; 255
     b06:	5f 4f       	sbci	r21, 0xFF	; 255

00000b08 <__divmodsi4_exit>:
     b08:	08 95       	ret

00000b0a <__negsi2>:
     b0a:	90 95       	com	r25
     b0c:	80 95       	com	r24
     b0e:	70 95       	com	r23
     b10:	61 95       	neg	r22
     b12:	7f 4f       	sbci	r23, 0xFF	; 255
     b14:	8f 4f       	sbci	r24, 0xFF	; 255
     b16:	9f 4f       	sbci	r25, 0xFF	; 255
     b18:	08 95       	ret

00000b1a <__udivmodsi4>:
     b1a:	a1 e2       	ldi	r26, 0x21	; 33
     b1c:	1a 2e       	mov	r1, r26
     b1e:	aa 1b       	sub	r26, r26
     b20:	bb 1b       	sub	r27, r27
     b22:	fd 01       	movw	r30, r26
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <__udivmodsi4_ep>

00000b26 <__udivmodsi4_loop>:
     b26:	aa 1f       	adc	r26, r26
     b28:	bb 1f       	adc	r27, r27
     b2a:	ee 1f       	adc	r30, r30
     b2c:	ff 1f       	adc	r31, r31
     b2e:	a2 17       	cp	r26, r18
     b30:	b3 07       	cpc	r27, r19
     b32:	e4 07       	cpc	r30, r20
     b34:	f5 07       	cpc	r31, r21
     b36:	20 f0       	brcs	.+8      	; 0xb40 <__udivmodsi4_ep>
     b38:	a2 1b       	sub	r26, r18
     b3a:	b3 0b       	sbc	r27, r19
     b3c:	e4 0b       	sbc	r30, r20
     b3e:	f5 0b       	sbc	r31, r21

00000b40 <__udivmodsi4_ep>:
     b40:	66 1f       	adc	r22, r22
     b42:	77 1f       	adc	r23, r23
     b44:	88 1f       	adc	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	1a 94       	dec	r1
     b4a:	69 f7       	brne	.-38     	; 0xb26 <__udivmodsi4_loop>
     b4c:	60 95       	com	r22
     b4e:	70 95       	com	r23
     b50:	80 95       	com	r24
     b52:	90 95       	com	r25
     b54:	9b 01       	movw	r18, r22
     b56:	ac 01       	movw	r20, r24
     b58:	bd 01       	movw	r22, r26
     b5a:	cf 01       	movw	r24, r30
     b5c:	08 95       	ret

00000b5e <fgetc>:
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	ec 01       	movw	r28, r24
     b64:	2b 81       	ldd	r18, Y+3	; 0x03
     b66:	20 ff       	sbrs	r18, 0
     b68:	33 c0       	rjmp	.+102    	; 0xbd0 <fgetc+0x72>
     b6a:	26 ff       	sbrs	r18, 6
     b6c:	0a c0       	rjmp	.+20     	; 0xb82 <fgetc+0x24>
     b6e:	2f 7b       	andi	r18, 0xBF	; 191
     b70:	2b 83       	std	Y+3, r18	; 0x03
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	9f 83       	std	Y+7, r25	; 0x07
     b7a:	8e 83       	std	Y+6, r24	; 0x06
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	29 c0       	rjmp	.+82     	; 0xbd4 <fgetc+0x76>
     b82:	22 ff       	sbrs	r18, 2
     b84:	0f c0       	rjmp	.+30     	; 0xba4 <fgetc+0x46>
     b86:	e8 81       	ld	r30, Y
     b88:	f9 81       	ldd	r31, Y+1	; 0x01
     b8a:	80 81       	ld	r24, Z
     b8c:	08 2e       	mov	r0, r24
     b8e:	00 0c       	add	r0, r0
     b90:	99 0b       	sbc	r25, r25
     b92:	00 97       	sbiw	r24, 0x00	; 0
     b94:	19 f4       	brne	.+6      	; 0xb9c <fgetc+0x3e>
     b96:	20 62       	ori	r18, 0x20	; 32
     b98:	2b 83       	std	Y+3, r18	; 0x03
     b9a:	1a c0       	rjmp	.+52     	; 0xbd0 <fgetc+0x72>
     b9c:	31 96       	adiw	r30, 0x01	; 1
     b9e:	f9 83       	std	Y+1, r31	; 0x01
     ba0:	e8 83       	st	Y, r30
     ba2:	0e c0       	rjmp	.+28     	; 0xbc0 <fgetc+0x62>
     ba4:	ea 85       	ldd	r30, Y+10	; 0x0a
     ba6:	fb 85       	ldd	r31, Y+11	; 0x0b
     ba8:	09 95       	icall
     baa:	97 ff       	sbrs	r25, 7
     bac:	09 c0       	rjmp	.+18     	; 0xbc0 <fgetc+0x62>
     bae:	2b 81       	ldd	r18, Y+3	; 0x03
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	11 f0       	breq	.+4      	; 0xbb8 <fgetc+0x5a>
     bb4:	80 e2       	ldi	r24, 0x20	; 32
     bb6:	01 c0       	rjmp	.+2      	; 0xbba <fgetc+0x5c>
     bb8:	80 e1       	ldi	r24, 0x10	; 16
     bba:	82 2b       	or	r24, r18
     bbc:	8b 83       	std	Y+3, r24	; 0x03
     bbe:	08 c0       	rjmp	.+16     	; 0xbd0 <fgetc+0x72>
     bc0:	2e 81       	ldd	r18, Y+6	; 0x06
     bc2:	3f 81       	ldd	r19, Y+7	; 0x07
     bc4:	2f 5f       	subi	r18, 0xFF	; 255
     bc6:	3f 4f       	sbci	r19, 0xFF	; 255
     bc8:	3f 83       	std	Y+7, r19	; 0x07
     bca:	2e 83       	std	Y+6, r18	; 0x06
     bcc:	99 27       	eor	r25, r25
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <fgetc+0x76>
     bd0:	8f ef       	ldi	r24, 0xFF	; 255
     bd2:	9f ef       	ldi	r25, 0xFF	; 255
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <printf_P>:
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e3 ef       	ldi	r30, 0xF3	; 243
     be0:	f5 e0       	ldi	r31, 0x05	; 5
     be2:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__prologue_saves__+0x1c>
     be6:	ae 01       	movw	r20, r28
     be8:	49 5f       	subi	r20, 0xF9	; 249
     bea:	5f 4f       	sbci	r21, 0xFF	; 255
     bec:	da 01       	movw	r26, r20
     bee:	6d 91       	ld	r22, X+
     bf0:	7d 91       	ld	r23, X+
     bf2:	ad 01       	movw	r20, r26
     bf4:	02 ed       	ldi	r16, 0xD2	; 210
     bf6:	13 e0       	ldi	r17, 0x03	; 3
     bf8:	f8 01       	movw	r30, r16
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	dc 01       	movw	r26, r24
     c00:	13 96       	adiw	r26, 0x03	; 3
     c02:	2c 91       	ld	r18, X
     c04:	13 97       	sbiw	r26, 0x03	; 3
     c06:	28 60       	ori	r18, 0x08	; 8
     c08:	13 96       	adiw	r26, 0x03	; 3
     c0a:	2c 93       	st	X, r18
     c0c:	0e 94 13 06 	call	0xc26	; 0xc26 <vfprintf>
     c10:	d8 01       	movw	r26, r16
     c12:	12 96       	adiw	r26, 0x02	; 2
     c14:	ed 91       	ld	r30, X+
     c16:	fc 91       	ld	r31, X
     c18:	13 97       	sbiw	r26, 0x03	; 3
     c1a:	23 81       	ldd	r18, Z+3	; 0x03
     c1c:	27 7f       	andi	r18, 0xF7	; 247
     c1e:	23 83       	std	Z+3, r18	; 0x03
     c20:	e4 e0       	ldi	r30, 0x04	; 4
     c22:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__epilogue_restores__+0x1c>

00000c26 <vfprintf>:
     c26:	ab e0       	ldi	r26, 0x0B	; 11
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e9 e1       	ldi	r30, 0x19	; 25
     c2c:	f6 e0       	ldi	r31, 0x06	; 6
     c2e:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__prologue_saves__>
     c32:	6c 01       	movw	r12, r24
     c34:	7b 01       	movw	r14, r22
     c36:	8a 01       	movw	r16, r20
     c38:	fc 01       	movw	r30, r24
     c3a:	17 82       	std	Z+7, r1	; 0x07
     c3c:	16 82       	std	Z+6, r1	; 0x06
     c3e:	83 81       	ldd	r24, Z+3	; 0x03
     c40:	81 ff       	sbrs	r24, 1
     c42:	cc c1       	rjmp	.+920    	; 0xfdc <vfprintf+0x3b6>
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	3c 01       	movw	r6, r24
     c4a:	f6 01       	movw	r30, r12
     c4c:	93 81       	ldd	r25, Z+3	; 0x03
     c4e:	f7 01       	movw	r30, r14
     c50:	93 fd       	sbrc	r25, 3
     c52:	85 91       	lpm	r24, Z+
     c54:	93 ff       	sbrs	r25, 3
     c56:	81 91       	ld	r24, Z+
     c58:	7f 01       	movw	r14, r30
     c5a:	88 23       	and	r24, r24
     c5c:	09 f4       	brne	.+2      	; 0xc60 <vfprintf+0x3a>
     c5e:	ba c1       	rjmp	.+884    	; 0xfd4 <vfprintf+0x3ae>
     c60:	85 32       	cpi	r24, 0x25	; 37
     c62:	39 f4       	brne	.+14     	; 0xc72 <vfprintf+0x4c>
     c64:	93 fd       	sbrc	r25, 3
     c66:	85 91       	lpm	r24, Z+
     c68:	93 ff       	sbrs	r25, 3
     c6a:	81 91       	ld	r24, Z+
     c6c:	7f 01       	movw	r14, r30
     c6e:	85 32       	cpi	r24, 0x25	; 37
     c70:	29 f4       	brne	.+10     	; 0xc7c <vfprintf+0x56>
     c72:	b6 01       	movw	r22, r12
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     c7a:	e7 cf       	rjmp	.-50     	; 0xc4a <vfprintf+0x24>
     c7c:	91 2c       	mov	r9, r1
     c7e:	21 2c       	mov	r2, r1
     c80:	31 2c       	mov	r3, r1
     c82:	ff e1       	ldi	r31, 0x1F	; 31
     c84:	f3 15       	cp	r31, r3
     c86:	d8 f0       	brcs	.+54     	; 0xcbe <vfprintf+0x98>
     c88:	8b 32       	cpi	r24, 0x2B	; 43
     c8a:	79 f0       	breq	.+30     	; 0xcaa <vfprintf+0x84>
     c8c:	38 f4       	brcc	.+14     	; 0xc9c <vfprintf+0x76>
     c8e:	80 32       	cpi	r24, 0x20	; 32
     c90:	79 f0       	breq	.+30     	; 0xcb0 <vfprintf+0x8a>
     c92:	83 32       	cpi	r24, 0x23	; 35
     c94:	a1 f4       	brne	.+40     	; 0xcbe <vfprintf+0x98>
     c96:	23 2d       	mov	r18, r3
     c98:	20 61       	ori	r18, 0x10	; 16
     c9a:	1d c0       	rjmp	.+58     	; 0xcd6 <vfprintf+0xb0>
     c9c:	8d 32       	cpi	r24, 0x2D	; 45
     c9e:	61 f0       	breq	.+24     	; 0xcb8 <vfprintf+0x92>
     ca0:	80 33       	cpi	r24, 0x30	; 48
     ca2:	69 f4       	brne	.+26     	; 0xcbe <vfprintf+0x98>
     ca4:	23 2d       	mov	r18, r3
     ca6:	21 60       	ori	r18, 0x01	; 1
     ca8:	16 c0       	rjmp	.+44     	; 0xcd6 <vfprintf+0xb0>
     caa:	83 2d       	mov	r24, r3
     cac:	82 60       	ori	r24, 0x02	; 2
     cae:	38 2e       	mov	r3, r24
     cb0:	e3 2d       	mov	r30, r3
     cb2:	e4 60       	ori	r30, 0x04	; 4
     cb4:	3e 2e       	mov	r3, r30
     cb6:	2a c0       	rjmp	.+84     	; 0xd0c <vfprintf+0xe6>
     cb8:	f3 2d       	mov	r31, r3
     cba:	f8 60       	ori	r31, 0x08	; 8
     cbc:	1d c0       	rjmp	.+58     	; 0xcf8 <vfprintf+0xd2>
     cbe:	37 fc       	sbrc	r3, 7
     cc0:	2d c0       	rjmp	.+90     	; 0xd1c <vfprintf+0xf6>
     cc2:	20 ed       	ldi	r18, 0xD0	; 208
     cc4:	28 0f       	add	r18, r24
     cc6:	2a 30       	cpi	r18, 0x0A	; 10
     cc8:	40 f0       	brcs	.+16     	; 0xcda <vfprintf+0xb4>
     cca:	8e 32       	cpi	r24, 0x2E	; 46
     ccc:	b9 f4       	brne	.+46     	; 0xcfc <vfprintf+0xd6>
     cce:	36 fc       	sbrc	r3, 6
     cd0:	81 c1       	rjmp	.+770    	; 0xfd4 <vfprintf+0x3ae>
     cd2:	23 2d       	mov	r18, r3
     cd4:	20 64       	ori	r18, 0x40	; 64
     cd6:	32 2e       	mov	r3, r18
     cd8:	19 c0       	rjmp	.+50     	; 0xd0c <vfprintf+0xe6>
     cda:	36 fe       	sbrs	r3, 6
     cdc:	06 c0       	rjmp	.+12     	; 0xcea <vfprintf+0xc4>
     cde:	8a e0       	ldi	r24, 0x0A	; 10
     ce0:	98 9e       	mul	r9, r24
     ce2:	20 0d       	add	r18, r0
     ce4:	11 24       	eor	r1, r1
     ce6:	92 2e       	mov	r9, r18
     ce8:	11 c0       	rjmp	.+34     	; 0xd0c <vfprintf+0xe6>
     cea:	ea e0       	ldi	r30, 0x0A	; 10
     cec:	2e 9e       	mul	r2, r30
     cee:	20 0d       	add	r18, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	22 2e       	mov	r2, r18
     cf4:	f3 2d       	mov	r31, r3
     cf6:	f0 62       	ori	r31, 0x20	; 32
     cf8:	3f 2e       	mov	r3, r31
     cfa:	08 c0       	rjmp	.+16     	; 0xd0c <vfprintf+0xe6>
     cfc:	8c 36       	cpi	r24, 0x6C	; 108
     cfe:	21 f4       	brne	.+8      	; 0xd08 <vfprintf+0xe2>
     d00:	83 2d       	mov	r24, r3
     d02:	80 68       	ori	r24, 0x80	; 128
     d04:	38 2e       	mov	r3, r24
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <vfprintf+0xe6>
     d08:	88 36       	cpi	r24, 0x68	; 104
     d0a:	41 f4       	brne	.+16     	; 0xd1c <vfprintf+0xf6>
     d0c:	f7 01       	movw	r30, r14
     d0e:	93 fd       	sbrc	r25, 3
     d10:	85 91       	lpm	r24, Z+
     d12:	93 ff       	sbrs	r25, 3
     d14:	81 91       	ld	r24, Z+
     d16:	7f 01       	movw	r14, r30
     d18:	81 11       	cpse	r24, r1
     d1a:	b3 cf       	rjmp	.-154    	; 0xc82 <vfprintf+0x5c>
     d1c:	98 2f       	mov	r25, r24
     d1e:	9f 7d       	andi	r25, 0xDF	; 223
     d20:	95 54       	subi	r25, 0x45	; 69
     d22:	93 30       	cpi	r25, 0x03	; 3
     d24:	28 f4       	brcc	.+10     	; 0xd30 <vfprintf+0x10a>
     d26:	0c 5f       	subi	r16, 0xFC	; 252
     d28:	1f 4f       	sbci	r17, 0xFF	; 255
     d2a:	9f e3       	ldi	r25, 0x3F	; 63
     d2c:	99 83       	std	Y+1, r25	; 0x01
     d2e:	0d c0       	rjmp	.+26     	; 0xd4a <vfprintf+0x124>
     d30:	83 36       	cpi	r24, 0x63	; 99
     d32:	31 f0       	breq	.+12     	; 0xd40 <vfprintf+0x11a>
     d34:	83 37       	cpi	r24, 0x73	; 115
     d36:	71 f0       	breq	.+28     	; 0xd54 <vfprintf+0x12e>
     d38:	83 35       	cpi	r24, 0x53	; 83
     d3a:	09 f0       	breq	.+2      	; 0xd3e <vfprintf+0x118>
     d3c:	59 c0       	rjmp	.+178    	; 0xdf0 <vfprintf+0x1ca>
     d3e:	21 c0       	rjmp	.+66     	; 0xd82 <vfprintf+0x15c>
     d40:	f8 01       	movw	r30, r16
     d42:	80 81       	ld	r24, Z
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	0e 5f       	subi	r16, 0xFE	; 254
     d48:	1f 4f       	sbci	r17, 0xFF	; 255
     d4a:	88 24       	eor	r8, r8
     d4c:	83 94       	inc	r8
     d4e:	91 2c       	mov	r9, r1
     d50:	53 01       	movw	r10, r6
     d52:	13 c0       	rjmp	.+38     	; 0xd7a <vfprintf+0x154>
     d54:	28 01       	movw	r4, r16
     d56:	f2 e0       	ldi	r31, 0x02	; 2
     d58:	4f 0e       	add	r4, r31
     d5a:	51 1c       	adc	r5, r1
     d5c:	f8 01       	movw	r30, r16
     d5e:	a0 80       	ld	r10, Z
     d60:	b1 80       	ldd	r11, Z+1	; 0x01
     d62:	36 fe       	sbrs	r3, 6
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <vfprintf+0x146>
     d66:	69 2d       	mov	r22, r9
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <vfprintf+0x14a>
     d6c:	6f ef       	ldi	r22, 0xFF	; 255
     d6e:	7f ef       	ldi	r23, 0xFF	; 255
     d70:	c5 01       	movw	r24, r10
     d72:	0e 94 ff 07 	call	0xffe	; 0xffe <strnlen>
     d76:	4c 01       	movw	r8, r24
     d78:	82 01       	movw	r16, r4
     d7a:	f3 2d       	mov	r31, r3
     d7c:	ff 77       	andi	r31, 0x7F	; 127
     d7e:	3f 2e       	mov	r3, r31
     d80:	16 c0       	rjmp	.+44     	; 0xdae <vfprintf+0x188>
     d82:	28 01       	movw	r4, r16
     d84:	22 e0       	ldi	r18, 0x02	; 2
     d86:	42 0e       	add	r4, r18
     d88:	51 1c       	adc	r5, r1
     d8a:	f8 01       	movw	r30, r16
     d8c:	a0 80       	ld	r10, Z
     d8e:	b1 80       	ldd	r11, Z+1	; 0x01
     d90:	36 fe       	sbrs	r3, 6
     d92:	03 c0       	rjmp	.+6      	; 0xd9a <vfprintf+0x174>
     d94:	69 2d       	mov	r22, r9
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <vfprintf+0x178>
     d9a:	6f ef       	ldi	r22, 0xFF	; 255
     d9c:	7f ef       	ldi	r23, 0xFF	; 255
     d9e:	c5 01       	movw	r24, r10
     da0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <strnlen_P>
     da4:	4c 01       	movw	r8, r24
     da6:	f3 2d       	mov	r31, r3
     da8:	f0 68       	ori	r31, 0x80	; 128
     daa:	3f 2e       	mov	r3, r31
     dac:	82 01       	movw	r16, r4
     dae:	33 fc       	sbrc	r3, 3
     db0:	1b c0       	rjmp	.+54     	; 0xde8 <vfprintf+0x1c2>
     db2:	82 2d       	mov	r24, r2
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	88 16       	cp	r8, r24
     db8:	99 06       	cpc	r9, r25
     dba:	b0 f4       	brcc	.+44     	; 0xde8 <vfprintf+0x1c2>
     dbc:	b6 01       	movw	r22, r12
     dbe:	80 e2       	ldi	r24, 0x20	; 32
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     dc6:	2a 94       	dec	r2
     dc8:	f4 cf       	rjmp	.-24     	; 0xdb2 <vfprintf+0x18c>
     dca:	f5 01       	movw	r30, r10
     dcc:	37 fc       	sbrc	r3, 7
     dce:	85 91       	lpm	r24, Z+
     dd0:	37 fe       	sbrs	r3, 7
     dd2:	81 91       	ld	r24, Z+
     dd4:	5f 01       	movw	r10, r30
     dd6:	b6 01       	movw	r22, r12
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     dde:	21 10       	cpse	r2, r1
     de0:	2a 94       	dec	r2
     de2:	21 e0       	ldi	r18, 0x01	; 1
     de4:	82 1a       	sub	r8, r18
     de6:	91 08       	sbc	r9, r1
     de8:	81 14       	cp	r8, r1
     dea:	91 04       	cpc	r9, r1
     dec:	71 f7       	brne	.-36     	; 0xdca <vfprintf+0x1a4>
     dee:	e8 c0       	rjmp	.+464    	; 0xfc0 <vfprintf+0x39a>
     df0:	84 36       	cpi	r24, 0x64	; 100
     df2:	11 f0       	breq	.+4      	; 0xdf8 <vfprintf+0x1d2>
     df4:	89 36       	cpi	r24, 0x69	; 105
     df6:	41 f5       	brne	.+80     	; 0xe48 <vfprintf+0x222>
     df8:	f8 01       	movw	r30, r16
     dfa:	37 fe       	sbrs	r3, 7
     dfc:	07 c0       	rjmp	.+14     	; 0xe0c <vfprintf+0x1e6>
     dfe:	60 81       	ld	r22, Z
     e00:	71 81       	ldd	r23, Z+1	; 0x01
     e02:	82 81       	ldd	r24, Z+2	; 0x02
     e04:	93 81       	ldd	r25, Z+3	; 0x03
     e06:	0c 5f       	subi	r16, 0xFC	; 252
     e08:	1f 4f       	sbci	r17, 0xFF	; 255
     e0a:	08 c0       	rjmp	.+16     	; 0xe1c <vfprintf+0x1f6>
     e0c:	60 81       	ld	r22, Z
     e0e:	71 81       	ldd	r23, Z+1	; 0x01
     e10:	07 2e       	mov	r0, r23
     e12:	00 0c       	add	r0, r0
     e14:	88 0b       	sbc	r24, r24
     e16:	99 0b       	sbc	r25, r25
     e18:	0e 5f       	subi	r16, 0xFE	; 254
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	f3 2d       	mov	r31, r3
     e1e:	ff 76       	andi	r31, 0x6F	; 111
     e20:	3f 2e       	mov	r3, r31
     e22:	97 ff       	sbrs	r25, 7
     e24:	09 c0       	rjmp	.+18     	; 0xe38 <vfprintf+0x212>
     e26:	90 95       	com	r25
     e28:	80 95       	com	r24
     e2a:	70 95       	com	r23
     e2c:	61 95       	neg	r22
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	8f 4f       	sbci	r24, 0xFF	; 255
     e32:	9f 4f       	sbci	r25, 0xFF	; 255
     e34:	f0 68       	ori	r31, 0x80	; 128
     e36:	3f 2e       	mov	r3, r31
     e38:	2a e0       	ldi	r18, 0x0A	; 10
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	a3 01       	movw	r20, r6
     e3e:	0e 94 46 08 	call	0x108c	; 0x108c <__ultoa_invert>
     e42:	88 2e       	mov	r8, r24
     e44:	86 18       	sub	r8, r6
     e46:	45 c0       	rjmp	.+138    	; 0xed2 <vfprintf+0x2ac>
     e48:	85 37       	cpi	r24, 0x75	; 117
     e4a:	31 f4       	brne	.+12     	; 0xe58 <vfprintf+0x232>
     e4c:	23 2d       	mov	r18, r3
     e4e:	2f 7e       	andi	r18, 0xEF	; 239
     e50:	b2 2e       	mov	r11, r18
     e52:	2a e0       	ldi	r18, 0x0A	; 10
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	25 c0       	rjmp	.+74     	; 0xea2 <vfprintf+0x27c>
     e58:	93 2d       	mov	r25, r3
     e5a:	99 7f       	andi	r25, 0xF9	; 249
     e5c:	b9 2e       	mov	r11, r25
     e5e:	8f 36       	cpi	r24, 0x6F	; 111
     e60:	c1 f0       	breq	.+48     	; 0xe92 <vfprintf+0x26c>
     e62:	18 f4       	brcc	.+6      	; 0xe6a <vfprintf+0x244>
     e64:	88 35       	cpi	r24, 0x58	; 88
     e66:	79 f0       	breq	.+30     	; 0xe86 <vfprintf+0x260>
     e68:	b5 c0       	rjmp	.+362    	; 0xfd4 <vfprintf+0x3ae>
     e6a:	80 37       	cpi	r24, 0x70	; 112
     e6c:	19 f0       	breq	.+6      	; 0xe74 <vfprintf+0x24e>
     e6e:	88 37       	cpi	r24, 0x78	; 120
     e70:	21 f0       	breq	.+8      	; 0xe7a <vfprintf+0x254>
     e72:	b0 c0       	rjmp	.+352    	; 0xfd4 <vfprintf+0x3ae>
     e74:	e9 2f       	mov	r30, r25
     e76:	e0 61       	ori	r30, 0x10	; 16
     e78:	be 2e       	mov	r11, r30
     e7a:	b4 fe       	sbrs	r11, 4
     e7c:	0d c0       	rjmp	.+26     	; 0xe98 <vfprintf+0x272>
     e7e:	fb 2d       	mov	r31, r11
     e80:	f4 60       	ori	r31, 0x04	; 4
     e82:	bf 2e       	mov	r11, r31
     e84:	09 c0       	rjmp	.+18     	; 0xe98 <vfprintf+0x272>
     e86:	34 fe       	sbrs	r3, 4
     e88:	0a c0       	rjmp	.+20     	; 0xe9e <vfprintf+0x278>
     e8a:	29 2f       	mov	r18, r25
     e8c:	26 60       	ori	r18, 0x06	; 6
     e8e:	b2 2e       	mov	r11, r18
     e90:	06 c0       	rjmp	.+12     	; 0xe9e <vfprintf+0x278>
     e92:	28 e0       	ldi	r18, 0x08	; 8
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	05 c0       	rjmp	.+10     	; 0xea2 <vfprintf+0x27c>
     e98:	20 e1       	ldi	r18, 0x10	; 16
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <vfprintf+0x27c>
     e9e:	20 e1       	ldi	r18, 0x10	; 16
     ea0:	32 e0       	ldi	r19, 0x02	; 2
     ea2:	f8 01       	movw	r30, r16
     ea4:	b7 fe       	sbrs	r11, 7
     ea6:	07 c0       	rjmp	.+14     	; 0xeb6 <vfprintf+0x290>
     ea8:	60 81       	ld	r22, Z
     eaa:	71 81       	ldd	r23, Z+1	; 0x01
     eac:	82 81       	ldd	r24, Z+2	; 0x02
     eae:	93 81       	ldd	r25, Z+3	; 0x03
     eb0:	0c 5f       	subi	r16, 0xFC	; 252
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <vfprintf+0x29c>
     eb6:	60 81       	ld	r22, Z
     eb8:	71 81       	ldd	r23, Z+1	; 0x01
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 5f       	subi	r16, 0xFE	; 254
     ec0:	1f 4f       	sbci	r17, 0xFF	; 255
     ec2:	a3 01       	movw	r20, r6
     ec4:	0e 94 46 08 	call	0x108c	; 0x108c <__ultoa_invert>
     ec8:	88 2e       	mov	r8, r24
     eca:	86 18       	sub	r8, r6
     ecc:	fb 2d       	mov	r31, r11
     ece:	ff 77       	andi	r31, 0x7F	; 127
     ed0:	3f 2e       	mov	r3, r31
     ed2:	36 fe       	sbrs	r3, 6
     ed4:	0d c0       	rjmp	.+26     	; 0xef0 <vfprintf+0x2ca>
     ed6:	23 2d       	mov	r18, r3
     ed8:	2e 7f       	andi	r18, 0xFE	; 254
     eda:	a2 2e       	mov	r10, r18
     edc:	89 14       	cp	r8, r9
     ede:	58 f4       	brcc	.+22     	; 0xef6 <vfprintf+0x2d0>
     ee0:	34 fe       	sbrs	r3, 4
     ee2:	0b c0       	rjmp	.+22     	; 0xefa <vfprintf+0x2d4>
     ee4:	32 fc       	sbrc	r3, 2
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <vfprintf+0x2d4>
     ee8:	83 2d       	mov	r24, r3
     eea:	8e 7e       	andi	r24, 0xEE	; 238
     eec:	a8 2e       	mov	r10, r24
     eee:	05 c0       	rjmp	.+10     	; 0xefa <vfprintf+0x2d4>
     ef0:	b8 2c       	mov	r11, r8
     ef2:	a3 2c       	mov	r10, r3
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <vfprintf+0x2d6>
     ef6:	b8 2c       	mov	r11, r8
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <vfprintf+0x2d6>
     efa:	b9 2c       	mov	r11, r9
     efc:	a4 fe       	sbrs	r10, 4
     efe:	0f c0       	rjmp	.+30     	; 0xf1e <vfprintf+0x2f8>
     f00:	fe 01       	movw	r30, r28
     f02:	e8 0d       	add	r30, r8
     f04:	f1 1d       	adc	r31, r1
     f06:	80 81       	ld	r24, Z
     f08:	80 33       	cpi	r24, 0x30	; 48
     f0a:	21 f4       	brne	.+8      	; 0xf14 <vfprintf+0x2ee>
     f0c:	9a 2d       	mov	r25, r10
     f0e:	99 7e       	andi	r25, 0xE9	; 233
     f10:	a9 2e       	mov	r10, r25
     f12:	09 c0       	rjmp	.+18     	; 0xf26 <vfprintf+0x300>
     f14:	a2 fe       	sbrs	r10, 2
     f16:	06 c0       	rjmp	.+12     	; 0xf24 <vfprintf+0x2fe>
     f18:	b3 94       	inc	r11
     f1a:	b3 94       	inc	r11
     f1c:	04 c0       	rjmp	.+8      	; 0xf26 <vfprintf+0x300>
     f1e:	8a 2d       	mov	r24, r10
     f20:	86 78       	andi	r24, 0x86	; 134
     f22:	09 f0       	breq	.+2      	; 0xf26 <vfprintf+0x300>
     f24:	b3 94       	inc	r11
     f26:	a3 fc       	sbrc	r10, 3
     f28:	11 c0       	rjmp	.+34     	; 0xf4c <vfprintf+0x326>
     f2a:	a0 fe       	sbrs	r10, 0
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <vfprintf+0x314>
     f2e:	b2 14       	cp	r11, r2
     f30:	88 f4       	brcc	.+34     	; 0xf54 <vfprintf+0x32e>
     f32:	28 0c       	add	r2, r8
     f34:	92 2c       	mov	r9, r2
     f36:	9b 18       	sub	r9, r11
     f38:	0e c0       	rjmp	.+28     	; 0xf56 <vfprintf+0x330>
     f3a:	b2 14       	cp	r11, r2
     f3c:	60 f4       	brcc	.+24     	; 0xf56 <vfprintf+0x330>
     f3e:	b6 01       	movw	r22, r12
     f40:	80 e2       	ldi	r24, 0x20	; 32
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     f48:	b3 94       	inc	r11
     f4a:	f7 cf       	rjmp	.-18     	; 0xf3a <vfprintf+0x314>
     f4c:	b2 14       	cp	r11, r2
     f4e:	18 f4       	brcc	.+6      	; 0xf56 <vfprintf+0x330>
     f50:	2b 18       	sub	r2, r11
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <vfprintf+0x332>
     f54:	98 2c       	mov	r9, r8
     f56:	21 2c       	mov	r2, r1
     f58:	a4 fe       	sbrs	r10, 4
     f5a:	10 c0       	rjmp	.+32     	; 0xf7c <vfprintf+0x356>
     f5c:	b6 01       	movw	r22, r12
     f5e:	80 e3       	ldi	r24, 0x30	; 48
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     f66:	a2 fe       	sbrs	r10, 2
     f68:	17 c0       	rjmp	.+46     	; 0xf98 <vfprintf+0x372>
     f6a:	a1 fc       	sbrc	r10, 1
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <vfprintf+0x34e>
     f6e:	88 e7       	ldi	r24, 0x78	; 120
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <vfprintf+0x352>
     f74:	88 e5       	ldi	r24, 0x58	; 88
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	b6 01       	movw	r22, r12
     f7a:	0c c0       	rjmp	.+24     	; 0xf94 <vfprintf+0x36e>
     f7c:	8a 2d       	mov	r24, r10
     f7e:	86 78       	andi	r24, 0x86	; 134
     f80:	59 f0       	breq	.+22     	; 0xf98 <vfprintf+0x372>
     f82:	a1 fe       	sbrs	r10, 1
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <vfprintf+0x364>
     f86:	8b e2       	ldi	r24, 0x2B	; 43
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <vfprintf+0x366>
     f8a:	80 e2       	ldi	r24, 0x20	; 32
     f8c:	a7 fc       	sbrc	r10, 7
     f8e:	8d e2       	ldi	r24, 0x2D	; 45
     f90:	b6 01       	movw	r22, r12
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     f98:	89 14       	cp	r8, r9
     f9a:	38 f4       	brcc	.+14     	; 0xfaa <vfprintf+0x384>
     f9c:	b6 01       	movw	r22, r12
     f9e:	80 e3       	ldi	r24, 0x30	; 48
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     fa6:	9a 94       	dec	r9
     fa8:	f7 cf       	rjmp	.-18     	; 0xf98 <vfprintf+0x372>
     faa:	8a 94       	dec	r8
     fac:	f3 01       	movw	r30, r6
     fae:	e8 0d       	add	r30, r8
     fb0:	f1 1d       	adc	r31, r1
     fb2:	80 81       	ld	r24, Z
     fb4:	b6 01       	movw	r22, r12
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     fbc:	81 10       	cpse	r8, r1
     fbe:	f5 cf       	rjmp	.-22     	; 0xfaa <vfprintf+0x384>
     fc0:	22 20       	and	r2, r2
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <vfprintf+0x3a0>
     fc4:	42 ce       	rjmp	.-892    	; 0xc4a <vfprintf+0x24>
     fc6:	b6 01       	movw	r22, r12
     fc8:	80 e2       	ldi	r24, 0x20	; 32
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     fd0:	2a 94       	dec	r2
     fd2:	f6 cf       	rjmp	.-20     	; 0xfc0 <vfprintf+0x39a>
     fd4:	f6 01       	movw	r30, r12
     fd6:	86 81       	ldd	r24, Z+6	; 0x06
     fd8:	97 81       	ldd	r25, Z+7	; 0x07
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <vfprintf+0x3ba>
     fdc:	8f ef       	ldi	r24, 0xFF	; 255
     fde:	9f ef       	ldi	r25, 0xFF	; 255
     fe0:	2b 96       	adiw	r28, 0x0b	; 11
     fe2:	e2 e1       	ldi	r30, 0x12	; 18
     fe4:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__epilogue_restores__>

00000fe8 <strnlen_P>:
     fe8:	fc 01       	movw	r30, r24
     fea:	05 90       	lpm	r0, Z+
     fec:	61 50       	subi	r22, 0x01	; 1
     fee:	70 40       	sbci	r23, 0x00	; 0
     ff0:	01 10       	cpse	r0, r1
     ff2:	d8 f7       	brcc	.-10     	; 0xfea <strnlen_P+0x2>
     ff4:	80 95       	com	r24
     ff6:	90 95       	com	r25
     ff8:	8e 0f       	add	r24, r30
     ffa:	9f 1f       	adc	r25, r31
     ffc:	08 95       	ret

00000ffe <strnlen>:
     ffe:	fc 01       	movw	r30, r24
    1000:	61 50       	subi	r22, 0x01	; 1
    1002:	70 40       	sbci	r23, 0x00	; 0
    1004:	01 90       	ld	r0, Z+
    1006:	01 10       	cpse	r0, r1
    1008:	d8 f7       	brcc	.-10     	; 0x1000 <strnlen+0x2>
    100a:	80 95       	com	r24
    100c:	90 95       	com	r25
    100e:	8e 0f       	add	r24, r30
    1010:	9f 1f       	adc	r25, r31
    1012:	08 95       	ret

00001014 <fputc>:
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	fb 01       	movw	r30, r22
    101e:	23 81       	ldd	r18, Z+3	; 0x03
    1020:	21 fd       	sbrc	r18, 1
    1022:	03 c0       	rjmp	.+6      	; 0x102a <fputc+0x16>
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	9f ef       	ldi	r25, 0xFF	; 255
    1028:	2c c0       	rjmp	.+88     	; 0x1082 <fputc+0x6e>
    102a:	22 ff       	sbrs	r18, 2
    102c:	16 c0       	rjmp	.+44     	; 0x105a <fputc+0x46>
    102e:	46 81       	ldd	r20, Z+6	; 0x06
    1030:	57 81       	ldd	r21, Z+7	; 0x07
    1032:	24 81       	ldd	r18, Z+4	; 0x04
    1034:	35 81       	ldd	r19, Z+5	; 0x05
    1036:	42 17       	cp	r20, r18
    1038:	53 07       	cpc	r21, r19
    103a:	44 f4       	brge	.+16     	; 0x104c <fputc+0x38>
    103c:	a0 81       	ld	r26, Z
    103e:	b1 81       	ldd	r27, Z+1	; 0x01
    1040:	9d 01       	movw	r18, r26
    1042:	2f 5f       	subi	r18, 0xFF	; 255
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	31 83       	std	Z+1, r19	; 0x01
    1048:	20 83       	st	Z, r18
    104a:	8c 93       	st	X, r24
    104c:	26 81       	ldd	r18, Z+6	; 0x06
    104e:	37 81       	ldd	r19, Z+7	; 0x07
    1050:	2f 5f       	subi	r18, 0xFF	; 255
    1052:	3f 4f       	sbci	r19, 0xFF	; 255
    1054:	37 83       	std	Z+7, r19	; 0x07
    1056:	26 83       	std	Z+6, r18	; 0x06
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <fputc+0x6e>
    105a:	8b 01       	movw	r16, r22
    105c:	ec 01       	movw	r28, r24
    105e:	fb 01       	movw	r30, r22
    1060:	00 84       	ldd	r0, Z+8	; 0x08
    1062:	f1 85       	ldd	r31, Z+9	; 0x09
    1064:	e0 2d       	mov	r30, r0
    1066:	09 95       	icall
    1068:	89 2b       	or	r24, r25
    106a:	e1 f6       	brne	.-72     	; 0x1024 <fputc+0x10>
    106c:	d8 01       	movw	r26, r16
    106e:	16 96       	adiw	r26, 0x06	; 6
    1070:	8d 91       	ld	r24, X+
    1072:	9c 91       	ld	r25, X
    1074:	17 97       	sbiw	r26, 0x07	; 7
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	17 96       	adiw	r26, 0x07	; 7
    107a:	9c 93       	st	X, r25
    107c:	8e 93       	st	-X, r24
    107e:	16 97       	sbiw	r26, 0x06	; 6
    1080:	ce 01       	movw	r24, r28
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	08 95       	ret

0000108c <__ultoa_invert>:
    108c:	fa 01       	movw	r30, r20
    108e:	aa 27       	eor	r26, r26
    1090:	28 30       	cpi	r18, 0x08	; 8
    1092:	51 f1       	breq	.+84     	; 0x10e8 <__ultoa_invert+0x5c>
    1094:	20 31       	cpi	r18, 0x10	; 16
    1096:	81 f1       	breq	.+96     	; 0x10f8 <__ultoa_invert+0x6c>
    1098:	e8 94       	clt
    109a:	6f 93       	push	r22
    109c:	6e 7f       	andi	r22, 0xFE	; 254
    109e:	6e 5f       	subi	r22, 0xFE	; 254
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	8f 4f       	sbci	r24, 0xFF	; 255
    10a4:	9f 4f       	sbci	r25, 0xFF	; 255
    10a6:	af 4f       	sbci	r26, 0xFF	; 255
    10a8:	b1 e0       	ldi	r27, 0x01	; 1
    10aa:	3e d0       	rcall	.+124    	; 0x1128 <__ultoa_invert+0x9c>
    10ac:	b4 e0       	ldi	r27, 0x04	; 4
    10ae:	3c d0       	rcall	.+120    	; 0x1128 <__ultoa_invert+0x9c>
    10b0:	67 0f       	add	r22, r23
    10b2:	78 1f       	adc	r23, r24
    10b4:	89 1f       	adc	r24, r25
    10b6:	9a 1f       	adc	r25, r26
    10b8:	a1 1d       	adc	r26, r1
    10ba:	68 0f       	add	r22, r24
    10bc:	79 1f       	adc	r23, r25
    10be:	8a 1f       	adc	r24, r26
    10c0:	91 1d       	adc	r25, r1
    10c2:	a1 1d       	adc	r26, r1
    10c4:	6a 0f       	add	r22, r26
    10c6:	71 1d       	adc	r23, r1
    10c8:	81 1d       	adc	r24, r1
    10ca:	91 1d       	adc	r25, r1
    10cc:	a1 1d       	adc	r26, r1
    10ce:	20 d0       	rcall	.+64     	; 0x1110 <__ultoa_invert+0x84>
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <__ultoa_invert+0x48>
    10d2:	68 94       	set
    10d4:	3f 91       	pop	r19
    10d6:	2a e0       	ldi	r18, 0x0A	; 10
    10d8:	26 9f       	mul	r18, r22
    10da:	11 24       	eor	r1, r1
    10dc:	30 19       	sub	r19, r0
    10de:	30 5d       	subi	r19, 0xD0	; 208
    10e0:	31 93       	st	Z+, r19
    10e2:	de f6       	brtc	.-74     	; 0x109a <__ultoa_invert+0xe>
    10e4:	cf 01       	movw	r24, r30
    10e6:	08 95       	ret
    10e8:	46 2f       	mov	r20, r22
    10ea:	47 70       	andi	r20, 0x07	; 7
    10ec:	40 5d       	subi	r20, 0xD0	; 208
    10ee:	41 93       	st	Z+, r20
    10f0:	b3 e0       	ldi	r27, 0x03	; 3
    10f2:	0f d0       	rcall	.+30     	; 0x1112 <__ultoa_invert+0x86>
    10f4:	c9 f7       	brne	.-14     	; 0x10e8 <__ultoa_invert+0x5c>
    10f6:	f6 cf       	rjmp	.-20     	; 0x10e4 <__ultoa_invert+0x58>
    10f8:	46 2f       	mov	r20, r22
    10fa:	4f 70       	andi	r20, 0x0F	; 15
    10fc:	40 5d       	subi	r20, 0xD0	; 208
    10fe:	4a 33       	cpi	r20, 0x3A	; 58
    1100:	18 f0       	brcs	.+6      	; 0x1108 <__ultoa_invert+0x7c>
    1102:	49 5d       	subi	r20, 0xD9	; 217
    1104:	31 fd       	sbrc	r19, 1
    1106:	40 52       	subi	r20, 0x20	; 32
    1108:	41 93       	st	Z+, r20
    110a:	02 d0       	rcall	.+4      	; 0x1110 <__ultoa_invert+0x84>
    110c:	a9 f7       	brne	.-22     	; 0x10f8 <__ultoa_invert+0x6c>
    110e:	ea cf       	rjmp	.-44     	; 0x10e4 <__ultoa_invert+0x58>
    1110:	b4 e0       	ldi	r27, 0x04	; 4
    1112:	a6 95       	lsr	r26
    1114:	97 95       	ror	r25
    1116:	87 95       	ror	r24
    1118:	77 95       	ror	r23
    111a:	67 95       	ror	r22
    111c:	ba 95       	dec	r27
    111e:	c9 f7       	brne	.-14     	; 0x1112 <__ultoa_invert+0x86>
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	61 05       	cpc	r22, r1
    1124:	71 05       	cpc	r23, r1
    1126:	08 95       	ret
    1128:	9b 01       	movw	r18, r22
    112a:	ac 01       	movw	r20, r24
    112c:	0a 2e       	mov	r0, r26
    112e:	06 94       	lsr	r0
    1130:	57 95       	ror	r21
    1132:	47 95       	ror	r20
    1134:	37 95       	ror	r19
    1136:	27 95       	ror	r18
    1138:	ba 95       	dec	r27
    113a:	c9 f7       	brne	.-14     	; 0x112e <__ultoa_invert+0xa2>
    113c:	62 0f       	add	r22, r18
    113e:	73 1f       	adc	r23, r19
    1140:	84 1f       	adc	r24, r20
    1142:	95 1f       	adc	r25, r21
    1144:	a0 1d       	adc	r26, r0
    1146:	08 95       	ret

00001148 <__prologue_saves__>:
    1148:	2f 92       	push	r2
    114a:	3f 92       	push	r3
    114c:	4f 92       	push	r4
    114e:	5f 92       	push	r5
    1150:	6f 92       	push	r6
    1152:	7f 92       	push	r7
    1154:	8f 92       	push	r8
    1156:	9f 92       	push	r9
    1158:	af 92       	push	r10
    115a:	bf 92       	push	r11
    115c:	cf 92       	push	r12
    115e:	df 92       	push	r13
    1160:	ef 92       	push	r14
    1162:	ff 92       	push	r15
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	ca 1b       	sub	r28, r26
    1172:	db 0b       	sbc	r29, r27
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	09 94       	ijmp

00001180 <__epilogue_restores__>:
    1180:	2a 88       	ldd	r2, Y+18	; 0x12
    1182:	39 88       	ldd	r3, Y+17	; 0x11
    1184:	48 88       	ldd	r4, Y+16	; 0x10
    1186:	5f 84       	ldd	r5, Y+15	; 0x0f
    1188:	6e 84       	ldd	r6, Y+14	; 0x0e
    118a:	7d 84       	ldd	r7, Y+13	; 0x0d
    118c:	8c 84       	ldd	r8, Y+12	; 0x0c
    118e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1190:	aa 84       	ldd	r10, Y+10	; 0x0a
    1192:	b9 84       	ldd	r11, Y+9	; 0x09
    1194:	c8 84       	ldd	r12, Y+8	; 0x08
    1196:	df 80       	ldd	r13, Y+7	; 0x07
    1198:	ee 80       	ldd	r14, Y+6	; 0x06
    119a:	fd 80       	ldd	r15, Y+5	; 0x05
    119c:	0c 81       	ldd	r16, Y+4	; 0x04
    119e:	1b 81       	ldd	r17, Y+3	; 0x03
    11a0:	aa 81       	ldd	r26, Y+2	; 0x02
    11a2:	b9 81       	ldd	r27, Y+1	; 0x01
    11a4:	ce 0f       	add	r28, r30
    11a6:	d1 1d       	adc	r29, r1
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	ed 01       	movw	r28, r26
    11b4:	08 95       	ret

000011b6 <_exit>:
    11b6:	f8 94       	cli

000011b8 <__stop_program>:
    11b8:	ff cf       	rjmp	.-2      	; 0x11b8 <__stop_program>
